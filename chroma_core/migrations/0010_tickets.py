# -*- coding: utf-8 -*-
# Generated by Django 1.11.27 on 2020-02-25 08:43
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("chroma_core", "0009_django_content_type_json_notify"),
    ]

    operations = [
        migrations.CreateModel(
            name="GrantRevokedTicketJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={
                "abstract": False,
            },
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RevokeGrantedTicketJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={
                "abstract": False,
            },
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                (
                    "ha_label",
                    models.CharField(
                        blank=True,
                        help_text=b"Label used for HA layer; human readable but unique",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("name", models.CharField(help_text=b"Name of ticket", max_length=64)),
                (
                    "resource_controlled",
                    models.BooleanField(
                        default=True, help_text=b"Ticket is controlled by a resources named in `ha_label`"
                    ),
                ),
                ("not_deleted", models.NullBooleanField(default=True)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="FilesystemTicket",
            fields=[
                (
                    "ticket_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Ticket",
                    ),
                ),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={
                "ordering": ["id"],
            },
            bases=("chroma_core.ticket",),
        ),
        migrations.CreateModel(
            name="MasterTicket",
            fields=[
                (
                    "ticket_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Ticket",
                    ),
                ),
                ("mgs", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedMgs")),
            ],
            options={
                "ordering": ["id"],
            },
            bases=("chroma_core.ticket",),
        ),
        migrations.AddField(
            model_name="ticket",
            name="content_type",
            field=models.ForeignKey(
                editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
            ),
        ),
        migrations.AddField(
            model_name="revokegrantedticketjob",
            name="ticket",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Ticket"),
        ),
        migrations.AddField(
            model_name="grantrevokedticketjob",
            name="ticket",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Ticket"),
        ),
        migrations.CreateModel(
            name="ForgetTicketJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                ("ticket", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Ticket")),
            ],
            options={
                "ordering": ["id"],
            },
            bases=("chroma_core.job",),
        ),
    ]
