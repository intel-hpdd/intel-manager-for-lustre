# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2019-09-07 01:14
from __future__ import unicode_literals

import chroma_core.models.registration_token
import chroma_core.models.utils
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AlertEmail",
            fields=[("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"))],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="AlertStateBase",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("record_type", models.CharField(default=b"", max_length=128)),
                ("variant", models.CharField(default=b"{}", max_length=512)),
                ("alert_item_id", models.PositiveIntegerField(null=True)),
                ("alert_type", models.CharField(max_length=128)),
                (
                    "begin",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text=b"Time at which the alert started"
                    ),
                ),
                (
                    "end",
                    models.DateTimeField(
                        help_text=b"Time at which the alert was resolved            if active is false, else time that the alert was last checked (e.g.            time when we last checked an offline target was still not offline)",
                        null=True,
                    ),
                ),
                (
                    "_message",
                    models.TextField(
                        db_column=b"message",
                        help_text=b"Message associated with the Alert. Created at Alert creation time",
                        null=True,
                    ),
                ),
                ("active", models.NullBooleanField()),
                (
                    "dismissed",
                    models.BooleanField(
                        default=False, help_text=b"True denotes that the user has acknowledged this alert."
                    ),
                ),
                (
                    "severity",
                    models.IntegerField(
                        default=20,
                        help_text=b"String indicating the severity of the alert, one of ['INFO', 'DEBUG', 'CRITICAL', 'WARNING', 'ERROR']",
                    ),
                ),
                ("lustre_pid", models.IntegerField(null=True)),
                (
                    "alert_item_type",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
                    ),
                ),
            ],
            options={"ordering": ["id"], "db_table": "chroma_core_alertstate"},
        ),
        migrations.CreateModel(
            name="AlertSubscription",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "alert_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alert_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="ClientCertificate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("serial", models.CharField(max_length=16)),
                ("revoked", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Command",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "complete",
                    models.BooleanField(
                        default=False,
                        help_text=b"True if all jobs have completed, or no jobs were needed to                      satisfy the command",
                    ),
                ),
                (
                    "errored",
                    models.BooleanField(
                        default=False,
                        help_text=b"True if one or more of the command's jobs failed, or if         there was an error scheduling jobs for this command",
                    ),
                ),
                (
                    "cancelled",
                    models.BooleanField(
                        default=False,
                        help_text=b"True if one or more of the command's jobs completed            with its cancelled attribute set to True, or if this command            was cancelled by the user",
                    ),
                ),
                (
                    "message",
                    models.CharField(
                        help_text=b"Human readable string about one sentence long describing            the action being done by the command",
                        max_length=512,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="ConfParam",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=512)),
                ("value", models.CharField(blank=True, max_length=512, null=True)),
                ("version", models.IntegerField()),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="Copytool",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                (
                    "index",
                    models.IntegerField(
                        default=0,
                        help_text=b"Instance index, used to uniquely identify per-host path-filesystem-archive instances",
                    ),
                ),
                (
                    "bin_path",
                    models.CharField(help_text=b"Path to copytool binary on HSM worker node", max_length=1024),
                ),
                ("archive", models.IntegerField(default=1, help_text=b"HSM archive number")),
                (
                    "mountpoint",
                    models.CharField(
                        default=b"/mnt/lustre", help_text=b"Lustre mountpoint on HSM worker node", max_length=1024
                    ),
                ),
                (
                    "hsm_arguments",
                    models.CharField(
                        help_text=b"Copytool arguments that are specific to the HSM implementation", max_length=131072
                    ),
                ),
                ("uuid", models.CharField(blank=True, help_text=b"UUID as assigned by cdt", max_length=36, null=True)),
                ("pid", models.IntegerField(blank=True, help_text=b"Current PID, if known", null=True)),
                ("not_deleted", models.NullBooleanField(default=True)),
            ],
            options={"ordering": ["id"]},
            bases=(models.Model, chroma_core.models.utils.MeasuredEntity),
        ),
        migrations.CreateModel(
            name="CopytoolOperation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "state",
                    models.SmallIntegerField(
                        choices=[
                            (0, b"unknown"),
                            (1, b"Started"),
                            (2, b"Currently"),
                            (3, b"Finished"),
                            (4, b"Failed while"),
                        ],
                        default=0,
                    ),
                ),
                (
                    "type",
                    models.SmallIntegerField(
                        choices=[
                            (0, b"unknown (file: %s)"),
                            (1, b"copying %s from Lustre to HSM backend"),
                            (2, b"restoring %s from HSM backend to Lustre"),
                            (3, b"removing %s from HSM backend"),
                        ],
                        default=0,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                (
                    "processed_bytes",
                    models.BigIntegerField(
                        blank=True, help_text=b"Count of bytes processed so far for running operation", null=True
                    ),
                ),
                (
                    "total_bytes",
                    models.BigIntegerField(
                        blank=True, help_text=b"Expected total bytes for running operation", null=True
                    ),
                ),
                ("path", models.CharField(blank=True, help_text=b"Lustre path of file", max_length=1024, null=True)),
                ("fid", models.CharField(blank=True, help_text=b"Lustre FID of file", max_length=1024, null=True)),
                (
                    "info",
                    models.CharField(
                        blank=True, help_text=b"Additional information, if available", max_length=256, null=True
                    ),
                ),
                (
                    "copytool",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operations",
                        to="chroma_core.Copytool",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="CorosyncConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                ("mcast_port", models.IntegerField(null=True)),
                (
                    "corosync_reported_up",
                    models.BooleanField(
                        default=False,
                        help_text=b"True if corosync on a node in this node's cluster reports that this node is online",
                    ),
                ),
                ("record_type", models.CharField(default=b"CorosyncConfiguration", max_length=128)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "state",
                    models.CharField(
                        default=b"pending", help_text=b"One of ('pending', 'tasked', 'complete')", max_length=16
                    ),
                ),
                (
                    "errored",
                    models.BooleanField(
                        default=False, help_text=b"True if the job has completed            with an error"
                    ),
                ),
                (
                    "cancelled",
                    models.BooleanField(
                        default=False,
                        help_text=b"True if the job has completed            as a result of a user cancelling it, or if it never started because of a failed            dependency",
                    ),
                ),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("wait_for_json", models.TextField()),
                ("locks_json", models.TextField()),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="ClearOldStratagemDataJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="LNetConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="LogMessage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("datetime", models.DateTimeField()),
                (
                    "fqdn",
                    models.CharField(
                        help_text=b"FQDN of the host from which the message was received.  Note that this host mayno longer exist or its FQDN may have changed since.",
                        max_length=255,
                    ),
                ),
                (
                    "severity",
                    models.SmallIntegerField(
                        help_text=b"Integer data. `RFC5424 severity <http://tools.ietf.org/html/rfc5424#section-6.2.1>`_"
                    ),
                ),
                (
                    "facility",
                    models.SmallIntegerField(
                        help_text=b"Integer data. `RFC5424 facility <http://tools.ietf.org/html/rfc5424#section-6.2.1>`_"
                    ),
                ),
                ("tag", models.CharField(max_length=63)),
                ("message", models.TextField()),
                ("message_class", models.SmallIntegerField()),
            ],
            options={"ordering": ["-datetime"]},
        ),
        migrations.CreateModel(
            name="LustreClientMount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "mountpoint",
                    models.CharField(
                        blank=True, help_text=b"Filesystem mountpoint on host", max_length=1024, null=True
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ManagedFilesystem",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(help_text=b"Lustre filesystem name, up to 8            characters", max_length=8),
                ),
                ("mdt_next_index", models.IntegerField(default=0)),
                ("ost_next_index", models.IntegerField(default=0)),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=(models.Model, chroma_core.models.utils.MeasuredEntity),
        ),
        migrations.CreateModel(
            name="ManagedHost",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                ("address", models.CharField(help_text=b"A URI like 'user@myhost.net:22'", max_length=255)),
                ("fqdn", models.CharField(help_text=b"Unicode string, fully qualified domain name", max_length=255)),
                ("nodename", models.CharField(help_text=b"Unicode string, node name", max_length=255)),
                ("boot_time", models.DateTimeField(blank=True, null=True)),
                (
                    "needs_update",
                    models.BooleanField(
                        default=False, help_text=b"True if there are package updates available for this server"
                    ),
                ),
                (
                    "corosync_ring0",
                    models.CharField(
                        help_text=b"Unicode string, hostname used to configure corosync ring0", max_length=255
                    ),
                ),
                (
                    "install_method",
                    models.CharField(help_text=b"The method used to install the agent on the server", max_length=32),
                ),
                ("properties", models.TextField(default=b"{}")),
                (
                    "client_filesystems",
                    models.ManyToManyField(
                        help_text=b"Filesystems for which this node is a non-server worker",
                        related_name="workers",
                        through="chroma_core.LustreClientMount",
                        to="chroma_core.ManagedFilesystem",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "ha_cluster_peers",
                    models.ManyToManyField(
                        blank=True,
                        help_text=b"List of peers in this host's HA cluster",
                        related_name="_managedhost_ha_cluster_peers_+",
                        to="chroma_core.ManagedHost",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=(models.Model, chroma_core.models.utils.MeasuredEntity),
        ),
        migrations.CreateModel(
            name="ManagedTarget",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text=b"Lustre target name, e.g. 'testfs-OST0001'.  May be null                            if the target has not yet been registered.",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        blank=True,
                        help_text=b"UUID of the target's internal file system.  May be null                            if the target has not yet been formatted",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "ha_label",
                    models.CharField(
                        blank=True,
                        help_text=b"Label used for HA layer; human readable but unique",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("inode_size", models.IntegerField(blank=True, help_text=b"Size in bytes per inode", null=True)),
                (
                    "bytes_per_inode",
                    models.IntegerField(
                        blank=True,
                        help_text=b"Constant used during formatting to determine inode count by dividing the volume size by ``bytes_per_inode``",
                        null=True,
                    ),
                ),
                (
                    "inode_count",
                    models.BigIntegerField(
                        blank=True, help_text=b"The number of inodes in this target'sbacking store", null=True
                    ),
                ),
                (
                    "reformat",
                    models.BooleanField(
                        default=False,
                        help_text=b"Only used during formatting, indicates that when formatting this target         any existing filesystem on the Volume should be overwritten",
                    ),
                ),
                ("not_deleted", models.NullBooleanField(default=True)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="ManagedTargetMount",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("mount_point", models.CharField(blank=True, max_length=512, null=True)),
                ("primary", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                ("host", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost")),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="NetworkInterface",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=32)),
                ("inet4_address", models.CharField(max_length=128)),
                ("inet4_prefix", models.IntegerField()),
                ("type", models.CharField(max_length=32)),
                ("state_up", models.BooleanField(default=False)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="NTPConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "host",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="_ntp_configuration",
                        to="chroma_core.ManagedHost",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="PacemakerConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "host",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="_pacemaker_configuration",
                        to="chroma_core.ManagedHost",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="PowerControlDevice",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text=b"Optional human-friendly display name (defaults to address)",
                        max_length=50,
                    ),
                ),
                (
                    "address",
                    chroma_core.models.power_control.ValidatedGenericIPAddressField(
                        help_text=b"IP address of power control device"
                    ),
                ),
                (
                    "port",
                    models.PositiveIntegerField(
                        blank=True, default=23, help_text=b"Network port used to access power control device"
                    ),
                ),
                (
                    "username",
                    models.CharField(blank=True, help_text=b"Username for device administration", max_length=64),
                ),
                (
                    "password",
                    models.CharField(blank=True, help_text=b"Password for device administration", max_length=64),
                ),
                (
                    "options",
                    models.CharField(
                        blank=True,
                        help_text=b"Custom options to be passed when invoking fence agent",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PowerControlDeviceOutlet",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "identifier",
                    models.CharField(
                        help_text=b"A string by which the associated device can identify the controlled resource (e.g. PDU outlet number, libvirt domain name, ipmi mgmt address, etc.)",
                        max_length=254,
                    ),
                ),
                ("has_power", models.NullBooleanField(help_text=b"Outlet power status (On, Off, Unknown)")),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outlets",
                        to="chroma_core.PowerControlDevice",
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        blank=True,
                        help_text=b"Optional association with a ManagedHost instance",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outlets",
                        to="chroma_core.ManagedHost",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PowerControlType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "agent",
                    models.CharField(
                        choices=[
                            (b"fence_apc", b"fence_apc"),
                            (b"fence_apc_snmp", b"fence_apc_snmp"),
                            (b"fence_ipmilan", b"fence_ipmilan"),
                            (b"fence_virsh", b"fence_virsh"),
                            (b"fence_vbox", b"fence_vbox"),
                        ],
                        help_text=b"Fencing agent (e.g. fence_apc, fence_ipmilan, etc.)",
                        max_length=255,
                    ),
                ),
                (
                    "make",
                    models.CharField(blank=True, help_text=b"Device manufacturer string", max_length=50, null=True),
                ),
                ("model", models.CharField(blank=True, help_text=b"Device model string", max_length=50, null=True)),
                (
                    "max_outlets",
                    models.PositiveIntegerField(
                        blank=True,
                        default=0,
                        help_text=b"The maximum number of outlets which may be associated with an instance of this device type (0 is unlimited)",
                    ),
                ),
                (
                    "default_port",
                    models.PositiveIntegerField(
                        blank=True, default=23, help_text=b"Network port used to access power control device"
                    ),
                ),
                (
                    "default_username",
                    models.CharField(blank=True, help_text=b"Factory-set admin username", max_length=128, null=True),
                ),
                (
                    "default_password",
                    models.CharField(blank=True, help_text=b"Factory-set admin password", max_length=128, null=True),
                ),
                (
                    "default_options",
                    models.CharField(
                        blank=True,
                        default=b"",
                        help_text=b"Default set of options to be passed when invoking fence agent",
                        max_length=255,
                    ),
                ),
                (
                    "poweron_template",
                    models.CharField(
                        blank=True,
                        default=b"%(agent)s %(options)s -a %(address)s -u %(port)s -l %(username)s -p %(password)s -o on -n %(identifier)s",
                        help_text=b"Command template for switching an outlet on",
                        max_length=512,
                    ),
                ),
                (
                    "powercycle_template",
                    models.CharField(
                        blank=True,
                        default=b"%(agent)s %(options)s  -a %(address)s -u %(port)s -l %(username)s -p %(password)s -o reboot -n %(identifier)s",
                        help_text=b"Command template for cycling an outlet",
                        max_length=512,
                    ),
                ),
                (
                    "poweroff_template",
                    models.CharField(
                        blank=True,
                        default=b"%(agent)s %(options)s -a %(address)s -u %(port)s -l %(username)s -p %(password)s -o off -n %(identifier)s",
                        help_text=b"Command template for switching an outlet off",
                        max_length=512,
                    ),
                ),
                (
                    "monitor_template",
                    models.CharField(
                        blank=True,
                        default=b"%(agent)s %(options)s -a %(address)s -u %(port)s -l %(username)s -p %(password)s -o monitor",
                        help_text=b"Command template for checking that a PDU is responding",
                        max_length=512,
                    ),
                ),
                (
                    "outlet_query_template",
                    models.CharField(
                        blank=True,
                        default=b"%(agent)s %(options)s -a %(address)s -u %(port)s -l %(username)s -p %(password)s -o status -n %(identifier)s",
                        help_text=b"Command template for querying an individual outlet's state",
                        max_length=512,
                    ),
                ),
                (
                    "outlet_list_template",
                    models.CharField(
                        blank=True,
                        default=b"%(agent)s %(options)s -a %(address)s -u %(port)s -l %(username)s -p %(password)s -o %(list_parameter)s",
                        help_text=b"Command template for listing all outlets on a PDU",
                        max_length=512,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RegistrationToken",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "expiry",
                    models.DateTimeField(
                        default=chroma_core.models.registration_token._default_expiry,
                        help_text=b"DateTime, at which time this token will expire.  Defaults to 60 seconds in the future.",
                    ),
                ),
                (
                    "cancelled",
                    models.BooleanField(
                        default=False,
                        help_text=b"Boolean, whether this token has been manually cancelled.  Once this is set, thetoken will no longer be accessible.  Initially false.",
                    ),
                ),
                (
                    "secret",
                    models.CharField(
                        default=chroma_core.models.registration_token._default_secret,
                        help_text=b"String, the secret used by servers to authenticate themselves (16 characters alphanumeric)String, the secret used by servers to authenticate themselves (16 characters alphanumeric)",
                        max_length=32,
                    ),
                ),
                (
                    "credits",
                    models.IntegerField(
                        default=1,
                        help_text=b"Integer, the number of servers which may register using this token before it expires (default 1)",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Repo",
            fields=[
                (
                    "repo_name",
                    models.CharField(
                        help_text=b"Unicode string, repo name", max_length=50, primary_key=True, serialize=False
                    ),
                ),
                ("location", models.CharField(help_text=b"Unicode string, repo file location", max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Sample_10",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("dt", models.DateTimeField(db_index=True)),
                ("sum", models.FloatField()),
                ("len", models.IntegerField()),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Sample_300",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("dt", models.DateTimeField(db_index=True)),
                ("sum", models.FloatField()),
                ("len", models.IntegerField()),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Sample_3600",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("dt", models.DateTimeField(db_index=True)),
                ("sum", models.FloatField()),
                ("len", models.IntegerField()),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Sample_60",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("dt", models.DateTimeField(db_index=True)),
                ("sum", models.FloatField()),
                ("len", models.IntegerField()),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Sample_86400",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("dt", models.DateTimeField(db_index=True)),
                ("sum", models.FloatField()),
                ("len", models.IntegerField()),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Series",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("object_id", models.PositiveIntegerField()),
                ("name", models.CharField(max_length=255)),
                ("type", models.CharField(max_length=30)),
                (
                    "content_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServerProfile",
            fields=[
                (
                    "name",
                    models.CharField(
                        help_text=b"String, unique name", max_length=50, primary_key=True, serialize=False
                    ),
                ),
                ("ui_name", models.CharField(help_text=b"String, human readable name", max_length=50)),
                ("ui_description", models.TextField(help_text=b"Description of the server profile")),
                ("managed", models.BooleanField(help_text=b"Boolean, True if the host will be managed")),
                (
                    "worker",
                    models.BooleanField(
                        default=False,
                        help_text=b"Boolean, True if the host is available to be used as a Lustre worker node",
                    ),
                ),
                ("user_selectable", models.BooleanField(default=True)),
                ("initial_state", models.CharField(max_length=32)),
                ("ntp", models.BooleanField(default=False, help_text=b"Boolean, True if the host will manage ntp")),
                (
                    "corosync",
                    models.BooleanField(default=False, help_text=b"Boolean, True if the host will manage corosync"),
                ),
                (
                    "corosync2",
                    models.BooleanField(default=False, help_text=b"Boolean, True if the host will manage corosync2"),
                ),
                (
                    "pacemaker",
                    models.BooleanField(default=False, help_text=b"Boolean, True if the host will manage pacemaker"),
                ),
                (
                    "default",
                    models.BooleanField(
                        default=False,
                        help_text=b"If True, this profile is presented as the default when addingstorage servers",
                    ),
                ),
                (
                    "repolist",
                    models.ManyToManyField(help_text=b"The repolist specified by this profile", to="chroma_core.Repo"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServerProfilePackage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("package_name", models.CharField(max_length=255)),
                (
                    "server_profile",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ServerProfile"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServerProfileValidation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("test", models.CharField(max_length=256)),
                ("description", models.CharField(max_length=256)),
                (
                    "server_profile",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ServerProfile"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SimpleHistoStoreBin",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("bin_idx", models.IntegerField()),
                ("value", models.PositiveIntegerField()),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="SimpleHistoStoreTime",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("time", models.PositiveIntegerField()),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StepResult",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("step_klass", picklefield.fields.PickledObjectField(editable=False)),
                (
                    "args",
                    picklefield.fields.PickledObjectField(
                        editable=False, help_text=b"Dictionary of arguments to this step"
                    ),
                ),
                (
                    "step_index",
                    models.IntegerField(
                        help_text=b"Zero-based index of this step within the steps of            a job.  If a step is retried, then two steps can have the same index for the same job."
                    ),
                ),
                ("step_count", models.IntegerField(help_text=b"Number of steps in this job")),
                ("log", models.TextField(help_text=b"Human readable summary of progress during execution.")),
                (
                    "console",
                    models.TextField(
                        help_text=b"Combined standard out and standard error from all            subprocesses run while completing this step.  This includes output from successful            as well as unsuccessful commands, and may be very verbose."
                    ),
                ),
                ("backtrace", models.TextField(help_text=b"Backtrace of an exception, if one occurred")),
                (
                    "state",
                    models.CharField(
                        default=b"incomplete", help_text=b"One of incomplete, failed, success", max_length=32
                    ),
                ),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("result", models.TextField(help_text=b"Arbitrary result data.", null=True)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageAlertPropagated",
            fields=[("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"))],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StoragePluginRecord",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("module_name", models.CharField(max_length=128)),
                ("internal", models.BooleanField(default=False)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageResourceAttributeReference",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=64)),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageResourceAttributeSerialized",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=64)),
                ("value", models.TextField()),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageResourceClass",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("class_name", models.CharField(max_length=128)),
                ("user_creatable", models.BooleanField(default=False)),
                (
                    "storage_plugin",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="chroma_core.StoragePluginRecord"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageResourceClassStatistic",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=64)),
                (
                    "resource_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StorageResourceClass"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageResourceRecord",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("storage_id_str", models.CharField(max_length=256)),
                ("alias", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "parents",
                    models.ManyToManyField(related_name="resource_parent", to="chroma_core.StorageResourceRecord"),
                ),
                (
                    "reported_by",
                    models.ManyToManyField(related_name="resource_reported_by", to="chroma_core.StorageResourceRecord"),
                ),
                (
                    "resource_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="chroma_core.StorageResourceClass"
                    ),
                ),
                (
                    "storage_id_scope",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="chroma_core.StorageResourceRecord",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StorageResourceStatistic",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sample_period", models.IntegerField()),
                ("name", models.CharField(max_length=64)),
                (
                    "storage_resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="chroma_core.StorageResourceRecord"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="StratagemConfiguration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("state_modified_at", models.DateTimeField()),
                ("state", models.CharField(max_length=32)),
                ("immutable_state", models.BooleanField(default=False)),
                (
                    "interval",
                    models.BigIntegerField(
                        help_text=b"Interval value in milliseconds between each stratagem execution"
                    ),
                ),
                (
                    "report_duration",
                    models.BigIntegerField(
                        help_text=b"Interval value in milliseconds between stratagem report execution", null=True
                    ),
                ),
                (
                    "purge_duration",
                    models.BigIntegerField(
                        help_text=b"Interval value in milliseconds between stratagem purges", null=True
                    ),
                ),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="TargetRecoveryInfo",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("recovery_status", models.TextField()),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="Volume",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "size",
                    models.BigIntegerField(
                        blank=True,
                        help_text=b"Integer number of bytes. Can be null if this device was manually created, rather than detected.",
                        null=True,
                    ),
                ),
                ("label", models.CharField(max_length=128)),
                ("filesystem_type", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "usable_for_lustre",
                    models.BooleanField(
                        default=True, help_text=b"True if the Volume can be selected for use as a new Lustre Target"
                    ),
                ),
                ("not_deleted", models.NullBooleanField(default=True)),
                (
                    "storage_resource",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="chroma_core.StorageResourceRecord",
                    ),
                ),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="VolumeNode",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.CharField(help_text=b"Device node path, e.g. '/dev/sda/'", max_length=512)),
                (
                    "primary",
                    models.BooleanField(
                        default=False,
                        help_text=b"If ``true``, this node will            be used for the primary Lustre server when creating a target",
                    ),
                ),
                (
                    "use",
                    models.BooleanField(
                        default=True,
                        help_text=b"If ``true``, this node will             be used as a Lustre server when creating a target (if primary is not set,            this node will be used as a secondary server)",
                    ),
                ),
                ("not_deleted", models.NullBooleanField(default=True)),
                ("host", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost")),
                (
                    "storage_resource",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="chroma_core.StorageResourceRecord",
                    ),
                ),
                ("volume", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Volume")),
            ],
            options={"ordering": ["id"]},
        ),
        migrations.CreateModel(
            name="AggregateStratagemResultsJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("fs_name", models.CharField(max_length=8)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ApplyConfParams",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="AutoConfigureCorosync2Job",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="AutoConfigureCorosyncJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureCopytoolJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureCorosync2Job",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("mcast_port", models.IntegerField(null=True)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureCorosyncJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("mcast_port", models.IntegerField(null=True)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureHostFencingJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                (
                    "config_changes",
                    models.CharField(help_text=b"A json string describing the configuration changes", max_length=4096),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureNTPJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "ntp_configuration",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.NTPConfiguration"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigurePacemakerJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "pacemaker_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.PacemakerConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureStratagemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "stratagem_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StratagemConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ConfigureTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="Corosync2Configuration",
            fields=[
                (
                    "corosyncconfiguration_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.CorosyncConfiguration",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.corosyncconfiguration",),
        ),
        migrations.CreateModel(
            name="DeployHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="DetectTargetsJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("host_ids", models.CharField(max_length=512)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="EnableLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="FailbackTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="FailoverTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="FilesystemClientConfParam",
            fields=[
                (
                    "confparam_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ConfParam",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.confparam",),
        ),
        migrations.CreateModel(
            name="FilesystemGlobalConfParam",
            fields=[
                (
                    "confparam_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ConfParam",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.confparam",),
        ),
        migrations.CreateModel(
            name="ForceRemoveCopytoolJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ForceRemoveHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ForgetFilesystemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ForgetStratagemConfigurationJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "stratagem_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StratagemConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ForgetTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="FormatTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="GetCorosyncStateJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="GetLNetStateJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="GetPacemakerStateJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                (
                    "pacemaker_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.PacemakerConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="InstallHostPackagesJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="LoadLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="MakeAvailableFilesystemUnavailable",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ManagedMdt",
            fields=[
                (
                    "managedtarget_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ManagedTarget",
                    ),
                ),
                ("index", models.IntegerField()),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.managedtarget", models.Model, chroma_core.models.utils.MeasuredEntity),
        ),
        migrations.CreateModel(
            name="ManagedMgs",
            fields=[
                (
                    "managedtarget_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ManagedTarget",
                    ),
                ),
                ("conf_param_version", models.IntegerField(default=0)),
                ("conf_param_version_applied", models.IntegerField(default=0)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.managedtarget", chroma_core.models.utils.MeasuredEntity),
        ),
        migrations.CreateModel(
            name="ManagedOst",
            fields=[
                (
                    "managedtarget_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ManagedTarget",
                    ),
                ),
                ("index", models.IntegerField()),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.managedtarget", models.Model, chroma_core.models.utils.MeasuredEntity),
        ),
        migrations.CreateModel(
            name="MdtConfParam",
            fields=[
                (
                    "confparam_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ConfParam",
                    ),
                ),
                ("mdt", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedMdt")),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.confparam",),
        ),
        migrations.CreateModel(
            name="MountLustreClientJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="MountLustreFilesystemsJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="Nid",
            fields=[
                (
                    "network_interface",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.NetworkInterface",
                    ),
                ),
                ("lnd_network", models.IntegerField(help_text=b"The lustre network number for this link", null=True)),
                (
                    "lnd_type",
                    models.CharField(help_text=b"The protocol type being used over the link", max_length=32, null=True),
                ),
            ],
            options={"ordering": ["network_interface"]},
        ),
        migrations.CreateModel(
            name="OstConfParam",
            fields=[
                (
                    "confparam_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.ConfParam",
                    ),
                ),
                ("ost", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedOst")),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.confparam",),
        ),
        migrations.CreateModel(
            name="PowercycleHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="PoweroffHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="PoweronHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RebootHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RegisterTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveConfiguredTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveCopytoolJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveFilesystemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveLustreClientJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveManagedHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveStratagemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "stratagem_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StratagemConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveUnconfiguredCopytoolJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RemoveUnconfiguredHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="RunStratagemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("mdt_id", models.IntegerField()),
                ("uuid", models.CharField(default=b"", max_length=64)),
                ("report_duration", models.BigIntegerField(null=True)),
                ("purge_duration", models.BigIntegerField(null=True)),
                ("fqdn", models.CharField(default=b"", max_length=255)),
                ("target_name", models.CharField(default=b"", max_length=64)),
                ("filesystem_type", models.CharField(default=b"", max_length=32)),
                ("target_mount_point", models.CharField(default=b"", max_length=512)),
                ("device_path", models.CharField(default=b"", max_length=512)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="SendStratagemResultsToClientJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("uuid", models.CharField(default=b"", max_length=64)),
                ("report_duration", models.BigIntegerField(null=True)),
                ("purge_duration", models.BigIntegerField(null=True)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="SetHostProfileJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="SetupHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="SetupMonitoredHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="SetupWorkerJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="ShutdownHostJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartCopytoolJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartCorosync2Job",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "corosync_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Corosync2Configuration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartCorosyncJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartPacemakerJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "pacemaker_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.PacemakerConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartStoppedFilesystemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StartUnavailableFilesystemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopCopytoolJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopCorosync2Job",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "corosync_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Corosync2Configuration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopCorosyncJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopPacemakerJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "pacemaker_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.PacemakerConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopTargetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="StopUnavailableFilesystemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "filesystem",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="TestHostConnectionJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("address", models.CharField(max_length=256)),
                ("credentials_key", models.IntegerField()),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="TriggerPluginUpdatesJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("host_ids", models.CharField(max_length=512)),
                ("plugin_names_json", models.CharField(max_length=512)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnconfigureCorosync2Job",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "corosync_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Corosync2Configuration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnconfigureCorosyncJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnconfigureLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnconfigureNTPJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "ntp_configuration",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.NTPConfiguration"),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnconfigurePacemakerJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "pacemaker_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.PacemakerConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnconfigureStratagemJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
                (
                    "stratagem_configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StratagemConfiguration"
                    ),
                ),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnloadLNetJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnmountLustreClientMountJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("old_state", models.CharField(max_length=32)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UnmountLustreFilesystemsJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UpdateDevicesJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("host_ids", models.CharField(max_length=512)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UpdateJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                )
            ],
            bases=("chroma_core.job",),
        ),
        migrations.CreateModel(
            name="UpdateNidsJob",
            fields=[
                (
                    "job_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="chroma_core.Job",
                    ),
                ),
                ("host_ids", models.CharField(max_length=512)),
            ],
            options={"ordering": ["id"]},
            bases=("chroma_core.job",),
        ),
        migrations.AddField(
            model_name="targetrecoveryinfo",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="storageresourceattributeserialized",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StorageResourceRecord"
            ),
        ),
        migrations.AddField(
            model_name="storageresourceattributereference",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StorageResourceRecord"
            ),
        ),
        migrations.AddField(
            model_name="storageresourceattributereference",
            name="value",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="value_resource",
                to="chroma_core.StorageResourceRecord",
            ),
        ),
        migrations.AlterUniqueTogether(name="storagepluginrecord", unique_together=set([("module_name",)])),
        migrations.AddField(
            model_name="storagealertpropagated",
            name="storage_resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StorageResourceRecord"
            ),
        ),
        migrations.AddField(
            model_name="stepresult",
            name="job",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Job"),
        ),
        migrations.AddField(
            model_name="simplehistostoretime",
            name="storage_resource_statistic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StorageResourceStatistic"
            ),
        ),
        migrations.AddField(
            model_name="simplehistostorebin",
            name="histo_store_time",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.SimpleHistoStoreTime"),
        ),
        migrations.AlterUniqueTogether(name="sample_86400", unique_together=set([("id", "dt")])),
        migrations.AlterUniqueTogether(name="sample_60", unique_together=set([("id", "dt")])),
        migrations.AlterUniqueTogether(name="sample_3600", unique_together=set([("id", "dt")])),
        migrations.AlterUniqueTogether(name="sample_300", unique_together=set([("id", "dt")])),
        migrations.AlterUniqueTogether(name="sample_10", unique_together=set([("id", "dt")])),
        migrations.AlterUniqueTogether(name="repo", unique_together=set([("repo_name",)])),
        migrations.AddField(
            model_name="registrationtoken",
            name="profile",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ServerProfile"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="powercontroltype", unique_together=set([("agent", "make", "model", "not_deleted")])
        ),
        migrations.AddField(
            model_name="powercontroldevice",
            name="device_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="instances", to="chroma_core.PowerControlType"
            ),
        ),
        migrations.AddField(
            model_name="networkinterface",
            name="corosync_configuration",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AddField(
            model_name="networkinterface",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="managedtargetmount",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="managedtargetmount",
            name="volume_node",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.VolumeNode"),
        ),
        migrations.AddField(
            model_name="managedtarget",
            name="active_mount",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTargetMount"
            ),
        ),
        migrations.AddField(
            model_name="managedtarget",
            name="content_type",
            field=models.ForeignKey(
                editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
            ),
        ),
        migrations.AddField(
            model_name="managedtarget",
            name="volume",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Volume"),
        ),
        migrations.AddField(
            model_name="managedhost",
            name="server_profile",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ServerProfile"
            ),
        ),
        migrations.AddField(
            model_name="lustreclientmount",
            name="filesystem",
            field=models.ForeignKey(
                help_text=b"Mounted filesystem",
                on_delete=django.db.models.deletion.CASCADE,
                to="chroma_core.ManagedFilesystem",
            ),
        ),
        migrations.AddField(
            model_name="lustreclientmount",
            name="host",
            field=models.ForeignKey(
                help_text=b"Mount host",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="client_mounts",
                to="chroma_core.ManagedHost",
            ),
        ),
        migrations.AddField(
            model_name="lnetconfiguration",
            name="host",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lnet_configuration",
                to="chroma_core.ManagedHost",
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="content_type",
            field=models.ForeignKey(
                editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
            ),
        ),
        migrations.AddField(
            model_name="corosyncconfiguration",
            name="content_type",
            field=models.ForeignKey(
                editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
            ),
        ),
        migrations.AddField(
            model_name="corosyncconfiguration",
            name="host",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="_corosync_configuration",
                to="chroma_core.ManagedHost",
            ),
        ),
        migrations.AddField(
            model_name="copytool",
            name="client_mount",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="copytools",
                to="chroma_core.LustreClientMount",
            ),
        ),
        migrations.AddField(
            model_name="copytool",
            name="content_type",
            field=models.ForeignKey(
                editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
            ),
        ),
        migrations.AddField(
            model_name="copytool",
            name="filesystem",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
        ),
        migrations.AddField(
            model_name="copytool",
            name="host",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="copytools", to="chroma_core.ManagedHost"
            ),
        ),
        migrations.AddField(
            model_name="confparam",
            name="content_type",
            field=models.ForeignKey(
                editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to="contenttypes.ContentType"
            ),
        ),
        migrations.AddField(model_name="command", name="jobs", field=models.ManyToManyField(to="chroma_core.Job")),
        migrations.AddField(
            model_name="clientcertificate",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.CreateModel(
            name="AlertEvent", fields=[], options={"proxy": True, "indexes": []}, bases=("chroma_core.alertstatebase",)
        ),
        migrations.CreateModel(
            name="AlertState", fields=[], options={"proxy": True, "indexes": []}, bases=("chroma_core.alertstatebase",)
        ),
        migrations.CreateModel(
            name="ClientConnectEvent",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CommandCancelledAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CommandErroredAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CommandRunningAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CommandSuccessfulAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CorosyncNoPeersAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CorosyncStoppedAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CorosyncToManyPeersAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="CorosyncUnknownPeersAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="HostContactAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="HostOfflineAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="HostRebootEvent",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="IpmiBmcUnavailableAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="LearnEvent", fields=[], options={"proxy": True, "indexes": []}, bases=("chroma_core.alertstatebase",)
        ),
        migrations.CreateModel(
            name="LNetNidsChangedAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="LNetOfflineAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="PacemakerStoppedAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="PowerControlDeviceUnavailableAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="StonithNotEnabledAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="StorageResourceAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="StorageResourceLearnEvent",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="StorageResourceOffline",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="SyslogEvent", fields=[], options={"proxy": True, "indexes": []}, bases=("chroma_core.alertstatebase",)
        ),
        migrations.CreateModel(
            name="TargetFailoverAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="TargetOfflineAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="TargetRecoveryAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.CreateModel(
            name="UpdatesAvailableAlert",
            fields=[],
            options={"proxy": True, "indexes": []},
            bases=("chroma_core.alertstatebase",),
        ),
        migrations.AlterUniqueTogether(name="volumenode", unique_together=set([("host", "path", "not_deleted")])),
        migrations.AlterUniqueTogether(name="volume", unique_together=set([("storage_resource", "not_deleted")])),
        migrations.AddField(
            model_name="updatejob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="unmountlustrefilesystemsjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="unmountlustreclientmountjob",
            name="lustre_client_mount",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LustreClientMount"),
        ),
        migrations.AddField(
            model_name="unloadlnetjob",
            name="lnet_configuration",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="unconfigurelnetjob",
            name="target_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="unconfigurecorosyncjob",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="storageresourcestatistic", unique_together=set([("storage_resource", "name")])
        ),
        migrations.AlterUniqueTogether(
            name="storageresourcerecord",
            unique_together=set([("storage_id_str", "storage_id_scope", "resource_class")]),
        ),
        migrations.AlterUniqueTogether(
            name="storageresourceclassstatistic", unique_together=set([("resource_class", "name")])
        ),
        migrations.AlterUniqueTogether(
            name="storageresourceclass", unique_together=set([("storage_plugin", "class_name")])
        ),
        migrations.AddField(
            model_name="storagealertpropagated",
            name="alert_state",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.StorageResourceAlert"),
        ),
        migrations.AddField(
            model_name="stoptargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="stoplnetjob",
            name="lnet_configuration",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="stopcorosyncjob",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AddField(
            model_name="stopcopytooljob",
            name="copytool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Copytool"),
        ),
        migrations.AddField(
            model_name="starttargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="startlnetjob",
            name="lnet_configuration",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="startcorosyncjob",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AddField(
            model_name="startcopytooljob",
            name="copytool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Copytool"),
        ),
        migrations.AddField(
            model_name="shutdownhostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="setupworkerjob",
            name="target_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="setupmonitoredhostjob",
            name="target_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="setuphostjob",
            name="target_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="sethostprofilejob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="sethostprofilejob",
            name="server_profile",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ServerProfile"),
        ),
        migrations.AlterUniqueTogether(
            name="serverprofilepackage", unique_together=set([("server_profile", "package_name")])
        ),
        migrations.AlterUniqueTogether(name="serverprofile", unique_together=set([("name",)])),
        migrations.AlterUniqueTogether(name="series", unique_together=set([("content_type", "object_id", "name")])),
        migrations.AddField(
            model_name="removeunconfiguredhostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="removeunconfiguredcopytooljob",
            name="copytool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Copytool"),
        ),
        migrations.AddField(
            model_name="removetargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="removemanagedhostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="removelustreclientjob",
            name="lustre_client_mount",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LustreClientMount"),
        ),
        migrations.AddField(
            model_name="removehostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="removecopytooljob",
            name="copytool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Copytool"),
        ),
        migrations.AddField(
            model_name="removeconfiguredtargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="registertargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="reboothostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="poweronhostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="poweroffhostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="powercyclehostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AlterUniqueTogether(
            name="powercontroldeviceoutlet", unique_together=set([("device", "identifier", "not_deleted")])
        ),
        migrations.AlterUniqueTogether(
            name="powercontroldevice", unique_together=set([("address", "port", "not_deleted")])
        ),
        migrations.AddField(
            model_name="nid",
            name="lnet_configuration",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AlterUniqueTogether(name="networkinterface", unique_together=set([("host", "name")])),
        migrations.AddField(
            model_name="mountlustrefilesystemsjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="mountlustreclientjob",
            name="lustre_client_mount",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LustreClientMount"),
        ),
        migrations.AlterUniqueTogether(name="managedhost", unique_together=set([("address", "not_deleted")])),
        migrations.AddField(
            model_name="managedfilesystem",
            name="mgs",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedMgs"),
        ),
        migrations.AddField(
            model_name="makeavailablefilesystemunavailable",
            name="filesystem",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
        ),
        migrations.AlterUniqueTogether(
            name="lustreclientmount", unique_together=set([("host", "filesystem", "not_deleted")])
        ),
        migrations.AddField(
            model_name="loadlnetjob",
            name="lnet_configuration",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="installhostpackagesjob",
            name="managed_host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="getlnetstatejob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="getcorosyncstatejob",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AddField(
            model_name="formattargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="forgettargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="forgetfilesystemjob",
            name="filesystem",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
        ),
        migrations.AddField(
            model_name="forceremovehostjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="forceremovecopytooljob",
            name="copytool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Copytool"),
        ),
        migrations.AddField(
            model_name="filesystemglobalconfparam",
            name="filesystem",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
        ),
        migrations.AddField(
            model_name="filesystemclientconfparam",
            name="filesystem",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedFilesystem"),
        ),
        migrations.AddField(
            model_name="failovertargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="failbacktargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="enablelnetjob",
            name="target_object",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="deployhostjob",
            name="managed_host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AlterUniqueTogether(
            name="copytooloperation", unique_together=set([("state", "copytool", "fid", "started_at", "finished_at")])
        ),
        migrations.AlterUniqueTogether(
            name="copytool",
            unique_together=set([("host", "bin_path", "filesystem", "archive", "index", "not_deleted")]),
        ),
        migrations.AddField(
            model_name="confparam",
            name="mgs",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedMgs"),
        ),
        migrations.AddField(
            model_name="configuretargetjob",
            name="target",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AddField(
            model_name="configurelnetjob",
            name="lnet_configuration",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.LNetConfiguration"),
        ),
        migrations.AddField(
            model_name="configurehostfencingjob",
            name="host",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedHost"),
        ),
        migrations.AddField(
            model_name="configurecorosyncjob",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AddField(
            model_name="configurecorosyncjob",
            name="network_interface_0",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="+", to="chroma_core.NetworkInterface"
            ),
        ),
        migrations.AddField(
            model_name="configurecorosyncjob",
            name="network_interface_1",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="+", to="chroma_core.NetworkInterface"
            ),
        ),
        migrations.AddField(
            model_name="configurecorosync2job",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Corosync2Configuration"
            ),
        ),
        migrations.AddField(
            model_name="configurecorosync2job",
            name="network_interface_0",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="+", to="chroma_core.NetworkInterface"
            ),
        ),
        migrations.AddField(
            model_name="configurecorosync2job",
            name="network_interface_1",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="+", to="chroma_core.NetworkInterface"
            ),
        ),
        migrations.AddField(
            model_name="configurecopytooljob",
            name="copytool",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Copytool"),
        ),
        migrations.AddField(
            model_name="autoconfigurecorosyncjob",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.CorosyncConfiguration"
            ),
        ),
        migrations.AddField(
            model_name="autoconfigurecorosync2job",
            name="corosync_configuration",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="chroma_core.Corosync2Configuration"
            ),
        ),
        migrations.AddField(
            model_name="applyconfparams",
            name="mgs",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chroma_core.ManagedTarget"),
        ),
        migrations.AlterUniqueTogether(
            name="alertstatebase", unique_together=set([("alert_item_type", "alert_item_id", "alert_type", "active")])
        ),
        migrations.AddField(
            model_name="alertemail", name="alerts", field=models.ManyToManyField(to="chroma_core.AlertState")
        ),
        migrations.AlterUniqueTogether(
            name="storagealertpropagated", unique_together=set([("storage_resource", "alert_state")])
        ),
        migrations.AlterUniqueTogether(name="managedfilesystem", unique_together=set([("name", "mgs", "not_deleted")])),
    ]
