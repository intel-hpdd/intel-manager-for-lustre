TOP ?= $(shell while [[ $$PWD != */chroma-dependencies ]]; do cd ..; done; echo $$PWD)
include $(TOP)/include/Makefile.meta

# there's probably a better way to do this directly in make but I couldn't
# find any suitable string handling functions
RPM_NAME        := $(shell a="$(LOCATION)"; a=$${a\#\#*/}; a=$${a/.src.rpm/}; echo $$a)
RPM_RELEASE     := $(shell a="$(RPM_NAME)"; a=$${a\#\#*-}; echo $$a)
RPM_NAME        := $(shell a="$(RPM_NAME)"; a=$${a/-$(RPM_RELEASE)/}; echo $$a)
RPM_VERSION     := $(shell a="$(RPM_NAME)"; a=$${a\#\#*-}; echo $$a)
RPM_NAME        := $(shell a="$(RPM_NAME)"; a=$${a/-$(RPM_VERSION)/}; echo $$a)
SRPM            := $(RPM_NAME)-$(RPM_VERSION)-$(RPM_RELEASE).src.rpm
LAST_BUILT      := $(shell [ -f .last_built ] && ! grep -q '*.src.rpm' .last_built && cat .last_built)
LAST_BUILT_SRPM := $(shell [ -f .last_built_srpm ] && cat .last_built_srpm)
NAME            ?= $(patsubst python-%,%,$(RPM_NAME))
REQUIREMENT     ?= $(NAME)==$(RPM_VERSION)

rpms: $(RPM_NAME).spec ../include/Makefile.rpmbuild ../include/Makefile.install
	set -e;                                                                                                     \
	if $(PLAT_BUILD_OK); then                                                                                   \
		for dep in $(DEPS); do                                                                              \
			$(MAKE) -C ../$$dep pkg_install;                                                            \
		done;                                                                                               \
		$(MAKE) -f ../include/Makefile.rpmbuild RPM_OPTS='$(RPM_OPTS)' RPMBUILD_OPTS='$(RPMBUILD_OPTS)' $@; \
		for dep in $(DEPS); do                                                                              \
			$(MAKE) -C ../$$dep pkg_uninstall;                                                          \
		done;                                                                                               \
		echo $(SRPM) > .last_build_srpm;                                                                    \
	fi

install pkg_install: rpms
	set -e;                                                                                                     \
	if $(PLAT_BUILD_OK); then                                                                                   \
		$(MAKE) -f ../include/Makefile.install INSTALL_PKGS="$(INSTALL_PKGS)" RPM_OPTS='$(RPM_OPTS)' SPECFILE=$(RPM_NAME).spec $@; \
	fi

uninstall pkg_uninstall:
	set -e;                                                                                                     \
	if $(PLAT_BUILD_OK); then                                                                                   \
		$(MAKE) -f ../include/Makefile.install INSTALL_PKGS="$(INSTALL_PKGS)" SPECFILE=$(RPM_NAME).spec $@; \
	fi

cleanRPMS cleanSRPM cleanBUILDDIR cleanTMPDIR:
	$(MAKE) -f ../include/Makefile.rpmbuild RPM_OPTS="$(RPM_OPTS)" RPMBUILD_OPTS="$(RPMBUILD_OPTS)" $@

$(TOP)/../chroma-externals/$(SRPM):
	set -e;                                                              \
	CACHE="$${CACHE:-$(TOP)/../chroma-externals}" . ../include/cache.sh; \
	cache_populate -t "RPM v3.0 src" $(LOCATION); \

$(RPM_NAME).spec: $(TOP)/../chroma-externals/$(SRPM) spec.ed
	# if we are building a different version than last time, clean
	# everything up
	set -e;                                                              \
	if [ -n "$(LAST_BUILT_SRPM)" -a                                      \
		     "$(LAST_BUILT_SRPM)" != "$(SRPM)" ]; then               \
	    touch $@;                                                        \
	    make -f ../include/Makefile.rpm LOCATION=$(LOCATION) clean;      \
	fi
	rm -f $@
	rpm2cpio < $(TOP)/../chroma-externals/$(SRPM) | cpio -id
	cp $(RPM_NAME).spec{,.orig}
	(cat spec.ed; echo -e "w\nq") | ed $(RPM_NAME).spec

spec.ed:
	# make an empty one if it doesn't exist already
	touch spec.ed

download: $(TOP)/../chroma-externals/$(SRPM)

clean: $(LAST_BUILT) $(RPM_NAME).spec
	cp $(RPM_NAME).spec.last_built $(RPM_NAME).spec || true
	$(MAKE) -f ../include/Makefile.rpmbuild cleanRPMS cleanSRPM \
						cleanBUILDDIR cleanTMPDIR \
						cleanPLATTREE
	# clean the stuff from the last built one, not necessarily the one
	# being built
	set -e;                                   \
	rpm -qlp $(LAST_BUILT) | while read f; do \
		rm -f $$f;                        \
	done
	rm -f $(LAST_BUILT) $(RPM_NAME).spec.last_built \
	      $(RPM_NAME).spec{,.orig} .last_built 

distclean: clean
	rm -rf $(RPM_TOP)
	rm -f $(SRPM) $(LAST_BUILT)
	set -e;                                                         \
	if ! git ls-files --error-unmatch spec.ed >/dev/null 2>&1; then \
		rm -f spec.ed;                                          \
	fi

cleanrepo:
	rm -rf $(REPO)

include ../include/Makefile.requirements
# it would be nice to do this, but it doesn't work since we need to be
# sure the spec file exists before being able to use rules like this.
# let's keep this here to remind us of what nirvana is and see if we
# can achieve it some day.
#$(RPM_DIR)/x86_64/%.x86_64.rpm: rpms
#	;
#
#$(RPM_DIR)/noarch/%.noarch.rpm: rpms
#	;
#
#include $(TOP)/include/Makefile.install
