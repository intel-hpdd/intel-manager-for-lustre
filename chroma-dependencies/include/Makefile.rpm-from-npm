TOP ?= $(shell while [[ $$PWD != */chroma-dependencies ]]; do cd ..; done; echo $$PWD)
include $(TOP)/include/Makefile.meta

TARBALL_EXT		 ?= tgz
LOCATION		 ?= http://registry.npmjs.org/$(NAME)/-/$(NAME)-$(VERSION).$(TARBALL_EXT)
# there's probably a better way to do this directly in make but I couldn't
# find any suitable string handling functions
TARBALL_NAME     := $(shell a="$(LOCATION)"; a=$${a\#\#*/}; a=$${a/.$(TARBALL_EXT)/}; echo $$a)
TARBALL_VERSION  := $(shell a="$(TARBALL_NAME)"; a=$${a\#\#*-}; echo $$a)
TARBALL_NAME     := $(shell a="$(TARBALL_NAME)"; a=$${a/-$(TARBALL_VERSION)/}; echo $$a)
TARBALL          := $(TARBALL_NAME)-$(TARBALL_VERSION).$(TARBALL_EXT)
BUILD_MODULES    := $(foreach dep,$(DEPENDENCIES),node_modules/$(dep))
BUILD_DEPS_TGZ	 := $(TARBALL_NAME)-modules.tar.gz
# can be overridden in the caller Makefile
SPECNAME         ?= $(TARBALL_NAME).spec

rpms: $(SPECNAME) $(TARBALL) $(BUILD_DEPS_TGZ)
	set -e;                                  \
	for dep in $(DEPS); do                   \
		$(MAKE) -C ../$$dep pkg_install; \
	done
	$(MAKE) -f ../include/Makefile.rpmbuild $@

install pkg_install: rpms
	$(MAKE) -f ../include/Makefile.install INSTALL_PKGS="$(INSTALL_PKGS)" SPECFILE="$(SPECNAME)" $@

$(BUILD_DEPS_TGZ): $(BUILD_MODULES)
	mkdir -p node_modules
	tar -czf $@ node_modules

node_modules/%:
	set -e;                                                                \
	name=$$(basename $@); project_name=nodejs-$$name;                      \
	$(MAKE) -C ../$$project_name tarball;                                  \
	mkdir -p $@;                                                           \
	tar -xzf ../$$project_name/$$name*.tgz -C $@ --transform='s|package||'

$(SPECNAME): $(TARBALL) spec.ed Makefile
	rm -rf tmp
	mkdir tmp
	tar xzvf $(TARBALL) -C tmp
	$(TOP)/include/npm2spec tmp/package/package.json > $(SPECNAME)
	cp $(SPECNAME){,.orig}
	(cat spec.ed ; echo -e "w\nq") | ed $(SPECNAME) 2>/dev/null
	rm -fr tmp

spec.ed:
	# make an empty one if it doesn't exist already
	touch spec.ed

$(TARBALL):
	set -e;                                                         \
	if [ -f "$(RPM_TOP)/SOURCES/$(TARBALL)" ]; then                 \
		ln "$(RPM_TOP)/SOURCES/$(TARBALL)" .;                   \
	else                                                            \
		CACHE="$${CACHE:-$$(pwd)/cache}" . ../include/cache.sh; \
		cache_get -s "$(SHA1SUM)" $(LOCATION);                  \
	fi

tarball: $(TARBALL)

clean:
	$(MAKE) -f ../include/Makefile.rpmbuild cleanRPMS cleanSRPM \
						cleanBUILDDIR cleanTMPDIR \
						cleanPLATTREE

distclean:
	rm -rf $(RPM_TOP)
	rm -f $(TARBALL) $(SPECNAME){,.{orig,last_built}} .last_built
	set -e;                                                         \
	if ! git ls-files --error-unmatch spec.ed >/dev/null 2>&1; then \
		rm -f spec.ed;                                          \
	fi

download:
	@echo "Nothing to do here"

include ../include/Makefile.requirements
