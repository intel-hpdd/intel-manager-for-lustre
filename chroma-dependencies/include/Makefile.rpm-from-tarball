TOP ?= $(shell while [[ $$PWD != */chroma-dependencies ]]; do cd ..; done; echo $$PWD)
include $(TOP)/include/Makefile.meta

CHROMA_EXTERNALS_DIR := $(TOP)/../chroma-externals/$(CHROMA_EXTERNALS_SUBDIR)/

TARBALL_EXT      ?= tar.gz
USES_DISTUTILS   ?= false
# there's probably a better way to do this directly in make but I couldn't
# find any suitable string handling functions
TARBALL_NAME     := $(shell a="$(LOCATION)"; a=$${a\#\#*/}; a=$${a/.$(TARBALL_EXT)/}; echo $$a)
TARBALL_VERSION  := $(shell a="$(TARBALL_NAME)"; a=$${a\#\#*-}; echo $$a)
TARBALL_NAME     := $(shell a="$(TARBALL_NAME)"; a=$${a/-$(TARBALL_VERSION)/}; echo $$a)
TARBALL          := $(TARBALL_NAME)-$(TARBALL_VERSION).$(TARBALL_EXT)
# can be overridden in the caller Makefile
SPECNAME         ?= $(TARBALL_NAME).spec
ifeq ($(CHROMA_EXTERNALS_SUBDIR),)
	REQUIREMENT ?= $(TARBALL_NAME)==$(TARBALL_VERSION)
else
	REQUIREMENT ?= file://$(CHROMA_EXTERNALS_DIR)$(TARBALL)
endif

rpms: $(SPECNAME) $(TARBALL) ../include/Makefile.rpmbuild ../include/Makefile.install
	set -e;                                                     \
	for dep in $(DEPS); do                                      \
	    if [ -a ../$$dep/Makefile ]; then                       \
	        $(MAKE) -C ../$$dep pkg_install;                    \
        else                                                        \
	        $(MAKE) -C ../epel pkg_install INSTALL_PKGS=$(dep); \
	    fi;                                                     \
	done
	$(MAKE) -f ../include/Makefile.rpmbuild RPM_OPTS='$(RPM_OPTS)' RPMBUILD_OPTS=$(RPMBUILD_OPTS) $@
	set -e;                                                       \
	for dep in $(DEPS); do                                        \
        if [ -a ../$$dep/Makefile ]; then                             \
		    $(MAKE) -C ../$$dep pkg_uninstall;                \
        else                                                          \
    		$(MAKE) -C ../epel pkg_uninstall INSTALL_PKGS=$(dep); \
	    fi;                                                       \
	done

install pkg_install: rpms
	$(MAKE) -f ../include/Makefile.install INSTALL_PKGS="$(INSTALL_PKGS)" RPM_OPTS='$(RPM_OPTS)' SPECFILE="$(SPECNAME)" $@

uninstall pkg_uninstall:
	$(MAKE) -f ../include/Makefile.install INSTALL_PKGS="$(INSTALL_PKGS)" RPM_OPTS='$(RPM_OPTS)' SPECFILE="$(SPECNAME)" $@

# Grab a tarball and build without all the python stuff
ifeq ($(TARBALL_NOT_PYTHON), TRUE)
$(SPECNAME): $(TARBALL) spec.ed Makefile
else
# only create a spec if one was not checked into git
ifeq ($(shell git ls-files --error-unmatch $(SPECNAME) >/dev/null 2>&1; echo $$?), 0)
$(SPECNAME):
	touch $(SPECNAME)
else
$(SPECNAME): $(TARBALL) spec.ed Makefile ../include/pypi-rpm_spec.ed ../include/setuptools-pypi-rpm_spec.ed
	# for now we will just assume that if there is no spec, it's a
	# python package
	rm -rf tmp
	mkdir tmp
	set -e;                                  \
	cd tmp &&                                \
	if [ $(TARBALL_EXT) = zip ]; then        \
	    unzip ../$(TARBALL);                 \
	elif [ $(TARBALL_EXT) = tar.bz2 ]; then  \
	    tar xjvf ../$(TARBALL);              \
	else                                     \
	    tar xzvf ../$(TARBALL);              \
	fi
	# seriously?  where do these people get their software packaging
	# licenses from?
	set -e;                                                            \
	if [ ! -d tmp/$(TARBALL_NAME)-$(TARBALL_VERSION) -a                \
	     -d tmp/$(TARBALL_NAME) ]; then                                \
	    mv tmp/$(TARBALL_NAME) tmp/$(TARBALL_NAME)-$(TARBALL_VERSION); \
	fi
	set -e;                                      \
	cd tmp/$(TARBALL_NAME)-$(TARBALL_VERSION) && \
	python setup.py bdist_rpm --spec-only &&     \
	mv dist/$(SPECNAME) ../..
	cp $(SPECNAME){,.orig}
	ed $(SPECNAME) < ../include/pypi-rpm_spec.ed 2>/dev/null
	echo -e "/^Source0:/c\nSource0: %{tgz_name}-%{unmangled_version}.$(TARBALL_EXT)\n.\n1;\$$s/^python/%{__python}/g\n.\nw\nq" | ed $(SPECNAME) 2>/dev/null
	set -e;                                                             \
	if ! $(USES_DISTUTILS) &&                                           \
	   grep setuptools tmp/$(TARBALL_NAME)-$(TARBALL_VERSION)/setup.py; \
	   then                                                             \
	    ed $(SPECNAME) < ../include/setuptools-pypi-rpm_spec.ed         \
	        2>/dev/null;                                                \
	fi
	(cat spec.ed ; echo -e "w\nq") | ed $(SPECNAME) 2>/dev/null
	rm -rf tmp
	rpm $(RPM_OPTS) -q --specfile $(SPECNAME)
endif
endif

spec.ed:
	# make an empty one if it doesn't exist already
	touch spec.ed

$(CHROMA_EXTERNALS_DIR)/$(TARBALL):
	CACHE="$${CACHE:-$(CHROMA_EXTERNALS_DIR)}" . ../include/cache.sh; \
	cache_populate $(LOCATION); \

$(TARBALL):
	ln $(CHROMA_EXTERNALS_DIR)/$(TARBALL) .

download: $(CHROMA_EXTERNALS_DIR)/$(TARBALL)

clean:
	$(MAKE) -f ../include/Makefile.rpmbuild cleanRPMS cleanSRPM       \
						cleanBUILDDIR cleanTMPDIR \
						cleanPLATTREE

distclean:
	rm -rf $(RPM_TOP)
	rm -f $(TARBALL) $(SPECNAME){,.{orig,last_built}} .last_built
	set -e;                                                         \
	if ! git ls-files --error-unmatch spec.ed >/dev/null 2>&1; then \
		rm -f spec.ed;                                          \
	fi

cleanrepo:
	rm -rf $(REPO)

include ../include/Makefile.requirements
