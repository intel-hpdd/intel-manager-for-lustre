#!/bin/sh

set -u

clean_opts()
{
  clean_opts=""

  while [ $# -gt 0 ]; do
    # --with|without cause rpm (but not rpmbuild) to fail
    if [[ $1 == *with* ]]; then
      shift 2
    else
      clean_opts="$clean_opts $1"
      shift
    fi
  done

  echo $clean_opts
}

rpm_query()
{
  local tag=$1
  local specfile=$2
  local format="%{$tag}"
  local filter="head -1"
  local with_arch=${3:-false}

  case $tag in
    filename)
      format="%{name}-%{version}-%{release}.%{arch}.rpm"
      ;;
    filenames)
      format="%{name}-%{version}-%{release}.%{arch}.rpm"
      filter="cat"
      ;;
    cleanlist)
      format="%{name}-%{version}-%{release}.%{arch}.rpm"
      filter="cat"
      ;;
  esac

  if $with_arch; then
      format="%{arch}/$format"
  fi
  CLEAN_OPTS=$(clean_opts ${RPM_OPTS:-""})

  (local pkg n=1 basename
  pkgs=$(eval rpm $CLEAN_OPTS --qf "'$format\n'" -q --specfile $specfile 2>/dev/null |
         sed -e 's/\*/\\*/g' \
             -e 's/\(\.el[0-9][0-9]*\)\.centos/\1/')
  # this is some nasty gymnastics.  the sed above is to escape any * in the
  # names so that they don't expand to any packages matching $pkg in the loop
  # below.  the only way to prevent the expansion in the loop below is to ""
  # $pkgs but then that becomes a single word instead of the list of $pkgs
  for pkg in $pkgs; do
    pkg=$(echo "$pkg" | sed -e 's/\\\*/*/g')
    local name="${pkg%-*-*}"
    local version="${pkg#$name-}"
    version="${version%-*}"
    local filespresent=true
    if [ $n -eq 1 ]; then
      basename=${name##*/}
      if ! egrep -q -e "^%files *(-f  *.*)?$" $specfile; then
        filespresent=false
      fi
    else
      subname=${name##*/}
      subname=${subname#*$basename-}
      if ! grep -q -e "^%files $subname *$" \
                   -e "^%files .* $subname *$" \
                   -e "^%files  *-n  *%{name}-$subname *$" $specfile; then
        filespresent=false
      fi
    fi
    let n=$n+1

    if $filespresent; then
      if [ -z "$match" ]; then
        echo "$pkg"
      else
        local pat
        for pat in $match; do
          if $with_arch && [[ $pkg = */$pat-$version-* ]] ||
             [[ $pkg = $pat-$version-* ]]; then
            echo "$pkg"
          fi
        done
      fi
    fi
  done) | $filter
}

with_arch=${with_arch:-false}
match=${match:-""}
while getopts "nvrafsc" opt; do
  shift
  case "$opt" in
    n) rpm_query name $1;;
    v) rpm_query version $1;;
    r) rpm_query release $1;;
    a) rpm_query arch $1;;
    f) rpm_query filename $1 $with_arch;;
    s) rpm_query filenames $1 $with_arch;;
    c) rpm_query cleanlist $1 $with_arch;;
  esac
  break
done
