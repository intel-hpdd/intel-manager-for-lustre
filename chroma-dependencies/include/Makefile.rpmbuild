TOP ?= $(shell while [[ $$PWD != */chroma-dependencies ]]; do cd ..; done; echo $$PWD)
include $(TOP)/include/Makefile.meta

TARBALL    ?= $(shell ls $(CURDIR)/*.tar* | head -1)
SPECFILE   ?= $(shell ls $(CURDIR)/*.spec | head -1)
SOURCEDIR  ?= $(CURDIR)

RPM_NAME    = $(shell RPM_OPTS='$(RPM_OPTS)' $(TOP)/include/parse_spec -n $(SPECFILE))
RPM_VERSION = $(shell RPM_OPTS='$(RPM_OPTS)' $(TOP)/include/parse_spec -v $(SPECFILE))
RPM_RELEASE = $(shell RPM_OPTS='$(RPM_OPTS)' $(TOP)/include/parse_spec -r $(SPECFILE))
RPM_ARCH    = $(shell RPM_OPTS='$(RPM_OPTS)' $(TOP)/include/parse_spec -a $(SPECFILE))
ALL_ARCH_RPMS    = $(shell with_arch=true RPM_OPTS='$(RPM_OPTS)' $(TOP)/include/parse_spec -s $(SPECFILE))
ALL_TARGETS  = $(patsubst %, $(RPM_DIR)/%,$(ALL_ARCH_RPMS))
# XXX - what happens when the version is updated across two make runs?
#       the RPMS that were built before the update won't get cleaned out
CLEAN_RPMS  = $(shell if [ -f $(SPECFILE).last_built ]; then with_arch=true $(TOP)/include/parse_spec -c $(SPECFILE).last_built; else echo ""; fi)
REQUIREMENT  ?= $(RPM_NAME)==$(RPM_VERSION)

rpms: $(ALL_TARGETS)

$(CURDIR)/$(PLAT_VERSION)/RPMS/%.rpm: $(SPECFILE)
	set -e;                                                                 \
	mkdir -p $(RPM_TOP)/{RPMS/{noarch,i686,x86_64},SRPMS,BUILD,TMP};        \
	$(MAKE) -f ../include/Makefile.rpmbuild cleanRPMS;                      \
	dist=$$(rpm --eval %dist);                                              \
	dist=$${dist/.centos/};                                                 \
	sudo yum-builddep -y $(SPECFILE);                                       \
	rpmbuild --define '%_topdir $(RPM_TOP)'                                 \
		 --define '%_sourcedir $(SOURCEDIR)'                            \
	         --define '%_tmppath $(RPM_TOP)/TMP'                            \
	         --define "%dist $$dist"                                        \
	         --define '%debug_package %{nil}'                               \
	         $(RPM_OPTS)                                                    \
	         $(RPMBUILD_OPTS)                                               \
	         -ba $(SPECFILE);                                               \
	touch $(RPM_LAST_BUILT);                                                \
	echo "$(RPM_NAME)-$(RPM_VERSION)-$(RPM_RELEASE).src.rpm" > .last_built; \
	cp $(SPECFILE) $(SPECFILE).last_built

cleanRPMS:
	# dirty hack: if there was no $(SPECFILE).last_built then there is
	# no list of RPMS to clean, so just clean the whole RPMS tree.
	# this should only ever happen during a transition to this new
	# cleanRPMS method
	set -e;                                              \
	if [ -z "$(CLEAN_RPMS)" ]; then                      \
	  find $(RPM_DIR) -type f -print | while read f; do  \
	    rm -f $$f;                                       \
	  done;                                              \
	else                                                 \
	  for rpm in $(CLEAN_RPMS); do                       \
	    rm -f $(RPM_DIR)/$$rpm;                          \
	  done;                                              \
	fi
	[ -f $(RPM_LAST_BUILT) ] && rm $(RPM_LAST_BUILT) || true

cleanSRPM:
	rm -f $(SRPM_DIR)/$(RPM_NAME)-$(RPM_VERSION)-$(RPM_RELEASE).src.rpm

cleanBUILDDIR:
	# this is lame.  we should only be cleaning the one for the current
	# version.  I don't think you can get the name of the dir under
	# BUILD/ where the source was unpacked and built though.
	rm -rf $(RPM_TOP)/BUILD/*

cleanTMPDIR:
	rm -rf $(RPM_TOP)/TMP/*

cleanPLATTREE:
	set -e;                                                                                   \
	for d in $(RPM_TOP){/{RPMS{/{noarch,i686,x86_64},},SRPMS,BUILD,TMP,SPECS,BUILDROOT},}; do \
		[ -f $$d ] && rmdir $$d || true;                                                  \
	done

clean: cleanRPMS cleanSRPM cleanBUILDDIR cleanTMPDIR

distclean: clean
	rm -rf $(RPM_TOP)
	rm -f $(SPECNAME) *.spec.last_built .last_built

# this doesn't work here
#include $(TOP)/include/Makefile.install
include ../include/Makefile.requirements
