#!/bin/sh

set -ex

[ -r localenv ] && . localenv

CHROMA_DIR=${CHROMA_DIR:-"$PWD/intel-manager-for-lustre/"}
CLUSTER_CONFIG=${CLUSTER_CONFIG:-"$CHROMA_DIR/chroma-manager/tests/framework/services/services_cluster_config.json"}

eval $(python $CHROMA_DIR/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")

MEASURE_COVERAGE=${MEASURE_COVERAGE:-false}

echo "Beginning installation and setup..."

# Install and setup manager
ssh root@$CHROMA_MANAGER <<EOF
set -ex
# Install non-python/pipable dependencies
yum makecache
yum install -y git python-virtualenv python-setuptools python-devel gcc make graphviz-devel postgresql-server postgresql-devel rabbitmq-server telnet python-ethtool erlang-inets patch gcc-c++ systemd-devel

# Create a user so we can run chroma as non-root
if ! id chromatest; then
    useradd chromatest
fi
su chromatest
mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
exit
cat .ssh/id_rsa.pub >> ~chromatest/.ssh/authorized_keys
scp .ssh/* chromatest@$CHROMA_MANAGER:.ssh/

# Configure rabbitmq
chkconfig rabbitmq-server on

# Some witch-craft to run rabbitmq as non-root in linux
echo "%rabbitmq ALL=(ALL) NOPASSWD: /usr/sbin/rabbitmqctl"  > /etc/sudoers.d/rabbitmqctl
chmod 440 /etc/sudoers.d/rabbitmqctl
sed -i "s/Defaults    requiretty/# Defaults    requiretty/g" /etc/sudoers
sed -i "s/rabbitmq:x:\([0-9]*\):[a-z]*/rabbitmq:x:\1:chromatest/g" /etc/group
# End witchcraft

export PATH=\$PATH:/usr/lib/rabbitmq/bin/
rabbitmq-plugins enable rabbitmq_management
service rabbitmq-server start &> rabbitmq_startup.log
cat rabbitmq_startup.log


# Testing rabbitmq and wait to be up and running
COUNTER=0
MAX_TRIALS=15
rabbitmqctl status
while [[ \$? -ne 0 && \$COUNTER -ne \$MAX_TRIALS ]];
    do
    sleep 2
    let COUNTER=COUNTER+1
    rabbitmqctl status
done;
echo "counter: \$COUNTER, trials: \$MAX_TRIALS"
[[ \$COUNTER -eq \$MAX_TRIALS ]] && { echo "RabbitMQ cannot be started!"; exit 1; }

# Testing rabbitmq internal messaging
curl http://localhost:15672/cli/rabbitmqadmin > \$HOME/rabbitmqadmin
chmod u+x \$HOME/rabbitmqadmin
\$HOME/rabbitmqadmin declare queue name=test-queue durable=false
\$HOME/rabbitmqadmin publish exchange=amq.default routing_key=test-queue payload="test_message"

COUNTER=0
grep_msg="\$HOME/rabbitmqadmin get queue=test-queue requeue=false | grep test_message"
while [[ \$(eval \$grep_msg) == "" && \$COUNTER -ne \$MAX_TRIALS ]];
    do
    sleep 2
    let COUNTER=COUNTER+1
done;
echo "counter: \$COUNTER, trials: \$MAX_TRIALS"
[[ \$COUNTER -eq \$MAX_TRIALS ]] && { echo "RabbitMQ cannot receive messages!"; exit 1; }

# Configure postgres
chkconfig postgresql on
service postgresql initdb
service postgresql start
# TODO: sleeping is racy.  should check for up-ness, not just assume it
#       will happen within 5 seconds
sleep 5  # Unfortunately postgresql start seems to return before its truly up and ready for business
su postgres -c 'createuser -R -S -d chroma'
su postgres -c 'createdb -O chroma chroma'
sed -i -e '/local[[:space:]]\+all/i\
local   all         chroma                            trust' /var/lib/pgsql/data/pg_hba.conf
service postgresql restart
EOF

. $CHROMA_DIR/chroma-manager/tests/framework/utils/install_deps.sh

. $CHROMA_DIR/chroma-manager/tests/framework/utils/make_develop.sh
