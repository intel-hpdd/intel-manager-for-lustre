#!/bin/bash -e

PROVISIONER=${PROVISIONER:-"ssh chromatest@autotest ./provisionchroma -v -S"}

. chroma-manager/tests/framework/utils/defaults.sh
. chroma-manager/tests/framework/utils/selective_auto_pass.sh

set_defaults false
check_for_autopass

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"$CHROMA_DIR/chroma-manager/tests/framework/services/services_cluster_config.json"}

# remove any previous chroma-externals content
rm -rf chroma-externals .git/modules/chroma-externals

cd $CHROMA_DIR/chroma-manager

# Release the provisioned cluster (at the exit of this script)
trap "$CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster" EXIT

# Provision cluster to run tests on
cd $WORKSPACE/chroma_test_env/
$CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

eval $(python $CHROMA_DIR/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")

pdsh -R ssh -l root -S -w $CHROMA_MANAGER $TEST_RUNNER "exec 2>&1; set -xe
cd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e \"s/distro=${TEST_DISTRO_NAME}${TEST_DISTRO_VERSION}/distro=$JENKINS_DISTRO/\" \$f
done" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# we should get the cluster fully configured from the provisioner, but we don't
ssh root@$CHROMA_MANAGER <<EOF
set -ex
# Install non-python/pipable dependencies
yum install -y python-virtualenv
EOF

# a version of $CHROMA_DIR that is relative
export REL_CHROMA_DIR=${CHROMA_DIR#$PWD/}

echo "Beginning automated test run..."
$CHROMA_DIR/chroma-manager/tests/framework/services/cluster_setup
$CHROMA_DIR/chroma-manager/tests/framework/services/run_tests
echo "Automated test run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  echo "
[paths]
source1 =
    $CHROMA_DIR
    /home/chromatest/chroma_test_env/${$REL_CHROMA_DIR}

[report]
include =
    $CHROMA_DIR*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
