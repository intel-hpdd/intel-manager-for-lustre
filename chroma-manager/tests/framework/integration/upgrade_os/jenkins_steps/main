#!/bin/bash -ex

. chroma-manager/tests/framework/utils/defaults.sh
. chroma-manager/tests/framework/utils/selective_auto_pass.sh

set_defaults true
check_for_autopass

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"chroma/chroma-manager/tests/framework/integration/shared_storage_configuration/full_cluster/shared_storage_configuration_cluster_cfg.json"}
SLAVE=${slave:?"Need to set slave"}

cd $WORKSPACE
curl -f -k -O "$JOB_URL/chroma-bundles/$ARCHIVE_NAME"

# Gather logs from nodes and release the cluster at exit
cleanup() {
    set -x
    set +e
    if $got_aborted; then
        tmpfile=/tmp/abort.$$.debug
        exec 2>/tmp/tmpfile
    fi
    python chroma/chroma-manager/tests/integration/utils/chroma_log_collector.py $WORKSPACE/test_logs $CLUSTER_CONFIG | tee $WORKSPACE/log_collector_out 2>&1
    chroma/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster || true
    echo "exit trap done"
    if [ -n "$tmpfile" -a -e "$tmpfile" ]; then
        cat $tmpfile | mail -s "job aborted" brian.murrell@intel.com
        rm $tmpfile
    fi
}

got_aborted=false
trap cleanup EXIT

trap "set -x
got_aborted=true
echo \"Got SIGTERM\"
ps axf
exit 1" TERM

chroma/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

# see if this cures the 401 errors from jenkins
eval $(python chroma/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")
pdsh -R ssh -l root -S -w $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]} ${WORKERS[@]} $CHROMA_MANAGER $TEST_RUNNER) "exec 2>&1; set -xe
cd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e 's/distro=el6\.[0-9]/distro=el6.4/' \$f
done" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

echo "Beginning automated test run..."
export MEASURE_COVERAGE=$MEASURE_COVERAGE
chroma/chroma-manager/tests/framework/integration/upgrade_os/cluster_setup
chroma/chroma-manager/tests/framework/integration/upgrade_os/run_tests
echo "Automated test run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  ls .coverage*
  # https://github.com/pypa/virtualenv/issues/355
  python_version=$(python -c 'import platform; print ".".join(platform.python_version_tuple()[0:2])')
  echo "
[paths]
source1 =
    $WORKSPACE/chroma/chroma-manager/
    /usr/share/chroma-manager/
source2 =
    $WORKSPACE/chroma/chroma-agent/chroma_agent/
    /usr/lib/python$python_version/site-packages/chroma_agent/

[report]
include =
    $WORKSPACE/chroma/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
