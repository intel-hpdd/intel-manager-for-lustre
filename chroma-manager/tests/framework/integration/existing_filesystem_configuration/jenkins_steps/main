#!/bin/bash -ex

. chroma-manager/tests/framework/utils/defaults.sh
. chroma-manager/tests/framework/utils/selective_auto_pass.sh

set_defaults false
check_for_autopass

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"chroma/chroma-manager/tests/framework/integration/existing_filesystem_configuration/existing_filesystem_configuration_cluster_cfg.json"}

cd $WORKSPACE
# Copy a fingerprinted file so we can link together the projects in jenkins.
set +x  # DONT REMOVE/COMMENT or you will risk exposing the jenkins-pull api token in the console logs.
echo "+ curl -f -k -O -u $JENKINS_USER:********* \"$JOB_URL/$ARCHIVE_NAME\""
curl -f -k -O -u $JENKINS_USER:$JENKINS_PULL "$JOB_URL/$ARCHIVE_NAME"
set -x

# Release the provisioned cluster (at exit of this script)
trap "set +e
set -x
# Gather logs from nodes
python chroma/chroma-manager/tests/integration/utils/chroma_log_collector.py $WORKSPACE/test_logs $CLUSTER_CONFIG

chroma/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster" EXIT

chroma/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

# see if this cures the 401 errors from jenkins
eval $(python chroma/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")
pdsh -R ssh -l root -S -w $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]} ${WORKERS[@]} $CHROMA_MANAGER $TEST_RUNNER) "exec 2>&1; set -xe
if [ -f /etc/yum.repos.d/autotest.repo ]; then
    set +x
    sed -i -e 's/Aitahd9u/$JENKINS_PULL/g' /etc/yum.repos.d/autotest.repo
    set -x
fi
pushd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e 's/distro=el6\.[0-9]/distro=el6.4/' -e 's/http:\/\/jenkins-pull/https:\/\/jenkins-pull/g' \$f
done
popd

# Disable EPEL
yum-config-manager --disable addon-epel\$(rpm --eval %rhel)-x86_64" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

chroma/chroma-manager/tests/framework/integration/existing_filesystem_configuration/cluster_setup

setup_rc=0
test_run_rc=0
for dne in true false; do
    for test_ha in true false; do
        if $test_ha; then
            device_types_to_test=(linux)
        else
            #devices_to_test=(zfs lvm mdraid linux); do  <--- mdraid Coming soon.
            device_types_to_test=(zfs lvm linux)
        fi

        for device_type in ${device_types_to_test[@]}; do
            if [ $TEST_DISTRO_VERSION == "7.2" ] && [ $device_type == "linux" ] && ! $test_ha; then
                echo "Skipping linux with no HA on el7.2 until it can be fixed"
                continue
            fi

            echo "Beginning automated ${device_type} run..."

            export TEST_SPECIFIC_CLUSTER_CONFIG=$PWD/existing_filesystem_configuration_cluster_cfg_${device_type}_HA_is_${test_ha}_dne_is_${dne}.json

            sed -e "s/\(\"device_type\": *\)\"linux\"/\1\"${device_type}\"/g" $CLUSTER_CONFIG > $TEST_SPECIFIC_CLUSTER_CONFIG
            sed -i -e "s/\(\"backend_filesystem\": *\)\"linux\"/\1\"${device_type}\"/g" $TEST_SPECIFIC_CLUSTER_CONFIG
            sed -i -e "s/\(\"test_ha\"\: *\)true/\1${test_ha}/g" $TEST_SPECIFIC_CLUSTER_CONFIG

            # One Kind entry is defined as "kind": "OSTorMDT" set it to be an OST for !dne or an MDT for dne
            # The replace actually does a number of things such as the mount point etc.
            if $dne; then
                sed -i -e s/OSTorMDT/MDT/g $TEST_SPECIFIC_CLUSTER_CONFIG
                sed -i -e s/ostORmdt/mdt/g $TEST_SPECIFIC_CLUSTER_CONFIG
            else
                sed -i -e s/OSTorMDT/OST/g $TEST_SPECIFIC_CLUSTER_CONFIG
                sed -i -e s/ostORmdt/ost/g $TEST_SPECIFIC_CLUSTER_CONFIG
            fi

            export XML_RESULTS_FILE="~/test_report_${device_type}_HA_is_${test_ha}.xml"

            # Don't stop on error for this case because if one iteration of this loop fails we still want to perform the other iterations
            cat $TEST_SPECIFIC_CLUSTER_CONFIG
            if ! chroma/chroma-manager/tests/framework/integration/existing_filesystem_configuration/filesystem_setup; then
                let setup_rc+=${PIPESTATUS[0]}
                echo "Automated ${device_type} setup failed"
                continue
            fi
            if ! chroma/chroma-manager/tests/framework/integration/existing_filesystem_configuration/run_tests; then
                let test_run_rc+=${PIPESTATUS[0]}
                echo "Automated ${device_type} run failed"
                continue
            fi
            echo "Automated ${device_type} run complete."
        done
    done
done

if [ $setup_rc -gt 0 -o $test_run_rc -gt 0 ]; then
    echo "One or more iterations failed"
    exit 1
fi

echo "Automated efs run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  ls .coverage*
  # https://github.com/pypa/virtualenv/issues/355
  python_version=$(python -c 'import platform; print ".".join(platform.python_version_tuple()[0:2])')
  echo "
[paths]
source1 =
    $WORKSPACE/chroma/chroma-manager/
    /usr/share/chroma-manager/
source2 =
    $WORKSPACE/chroma/chroma-agent/chroma_agent/
    /usr/lib/python$python_version/site-packages/chroma_agent/

[report]
include =
    $WORKSPACE/chroma/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
