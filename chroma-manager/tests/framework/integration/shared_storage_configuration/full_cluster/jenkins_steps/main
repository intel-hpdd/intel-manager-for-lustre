#!/bin/bash -ex

. chroma-manager/tests/framework/utils/defaults.sh
. chroma-manager/tests/framework/utils/selective_auto_pass.sh

set_defaults false
check_for_autopass

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"$CHROMA_DIR/chroma-manager/tests/framework/integration/shared_storage_configuration/full_cluster/shared_storage_configuration_cluster_cfg.json"}

cd $WORKSPACE
set +x  # DONT REMOVE/COMMENT or you will risk exposing the jenkins-pull api token in the console logs.
echo "+ curl -f -k -O -u $JENKINS_USER:********** \"$JOB_URL/$ARCHIVE_NAME\""
curl -f -k -O -u $JENKINS_USER:$JENKINS_PULL "$JOB_URL/$ARCHIVE_NAME"
set -x

# Gather logs from nodes and release the cluster at exit
cleanup() {
    set -x
    set +e
    if $got_aborted; then
        tmpfile=/tmp/abort.$$.debug
        exec 2>$tmpfile
        env >&2
    fi
    python $CHROMA_DIR/chroma-manager/tests/integration/utils/chroma_log_collector.py $WORKSPACE/test_logs $CLUSTER_CONFIG | tee $WORKSPACE/log_collector_out 2>&1 || true
    # look for known failures in the logs
    if grep "LDISKFS-fs (.*): group descriptors corrupted" $WORKSPACE/test_logs/*-messages.log; then
        echo "bug: TEI-39" test_output
    fi
    if egrep "^ssh: Could not resolve hostname lotus-[0-9][0-9]*vm1*4\.iml\.intel\.com: Name or service not known" $WORKSPACE/log_collector_out; then
        echo "bug: TEI-1327"
    fi
    rm -f $WORKSPACE/log_collector_out
    if grep "AssertionError: 300 not less than 300 : Timed out waiting for host to come back online" $WORKSPACE/test_logs/*-chroma_test.log; then
        echo "bug: HYD-2889"
    fi
    if grep "Could not match packages: Cannot retrieve repository metadata (repomd.xml) for repository: lustre-client. Please verify its path and try again" $WORKSPACE/test_logs/*-chroma_test.log; then
        echo "bug: HYD-2948"
    fi

    if [ -f $CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster ]; then
        $CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster || true
    else
        {
        echo "*****************************************************************"
        echo "$CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster could not be found"
        if $got_aborted; then
            echo "this job was aborted!!"
        fi
        pwd
        ls -l chroma
        echo "*****************************************************************"
        } >&2
    fi

    echo "exit trap done" >&2
    if [ -n "$tmpfile" -a -e "$tmpfile" ]; then
        cat $tmpfile | mail -s "job aborted" brian.murrell@intel.com
        #rm $tmpfile
    fi
}

got_aborted=false
trap cleanup EXIT

trap "set -x
got_aborted=true
echo \"Got SIGTERM\"
ps axf
exit 1" TERM

$CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

# see if this cures the 401 errors from jenkins
eval $(python $CHROMA_DIR/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")
pdsh -R ssh -l root -S -w $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]} ${WORKERS[@]} $CHROMA_MANAGER $TEST_RUNNER) "exec 2>&1; set -xe
if [ -f /etc/yum.repos.d/autotest.repo ]; then
    set +x
    sed -i -e 's/Aitahd9u/$JENKINS_PULL/g' /etc/yum.repos.d/autotest.repo
    set -x
fi
cd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e 's/distro=el6\.[0-9]/distro=el6.4/' \$f
done" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

echo "Beginning automated test run..."
export MEASURE_COVERAGE=$MEASURE_COVERAGE
$CHROMA_DIR/chroma-manager/tests/framework/integration/shared_storage_configuration/full_cluster/cluster_setup
$CHROMA_DIR/chroma-manager/tests/framework/integration/shared_storage_configuration/full_cluster/run_tests
echo "Automated test run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  ls .coverage*
  # https://github.com/pypa/virtualenv/issues/355
  python_version=$(python -c 'import platform; print ".".join(platform.python_version_tuple()[0:2])')
  echo "
[paths]
source1 =
    $WORKSPACE/$CHROMA_DIR/chroma-manager/
    /usr/share/chroma-manager/
source2 =
    $WORKSPACE/$CHROMA_DIR/chroma-agent/chroma_agent/
    /usr/lib/python$python_version/site-packages/chroma_agent/

[report]
include =
    $WORKSPACE/$CHROMA_DIR/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
