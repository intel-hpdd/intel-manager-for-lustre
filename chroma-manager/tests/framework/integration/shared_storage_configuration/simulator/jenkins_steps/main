#!/bin/bash -ex

PROVISIONER=${PROVISIONER:-"ssh chromatest@autotest ./provisionchroma -v -S"}

. chroma-manager/tests/framework/utils/defaults.sh
. chroma-manager/tests/framework/utils/selective_auto_pass.sh

set_defaults false
check_for_autopass

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"$CHROMA_DIR/chroma-manager/tests/simulator.json"}

# remove any previous chroma-externals content
rm -rf chroma-externals .git/modules/chroma-externals

cd $CHROMA_DIR/chroma-manager

# Release the provisioned cluster (at the exit of this script)
trap "$CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster" EXIT

# Provision cluster to run tests on
cd $WORKSPACE/chroma_test_env/
$CHROMA_DIR/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

# Use the server profiles for the managed servers that matches the distro we're testing on
sed -i -e "s/\(\"profile\": *\)\"base_managed_RH[0-9]\"/\1\"base_managed_RH${TEST_DISTRO_VERSION[0]}\"/g" $CLUSTER_CONFIG_TEMPLATE

# a version of $CHROMA_DIR that is relative
export REL_CHROMA_DIR=${CHROMA_DIR#$PWD/}

echo "Beginning automated test run..."
$CHROMA_DIR/chroma-manager/tests/framework/integration/shared_storage_configuration/simulator/cluster_setup
$CHROMA_DIR/chroma-manager/tests/framework/integration/shared_storage_configuration/simulator/run_tests
find ./test_reports/ -type f -size 0 -exec rm {} \; || true
echo "Automated test run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  echo "
[paths]
source1 =
    $CHROMA_DIR/
    /home/chromatest/chroma_test_env/$REL_CHROMA_DIR/

[report]
include =
    $CHROMA_DIR/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
