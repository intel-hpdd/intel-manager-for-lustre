#!/bin/bash
#
# This script is a simple wrapper around our integration tests. It performs
# the following steps.
#
# (1) Run any existing checks against a cluster to ensure it is configured
#     properly to be used for the tests. (checks still minimal)
# (2) Warns the developer it will wipe all data on their cluster.
# (3) Runs the tests, with an xml report if requested.

NOSE_ARGS=${NOSE_ARGS:-"-x"}
FORCED=false
CONFIG_FILE=tests/integration/shared_storage_configuration/sample_cluster_cfg.json
XML_REPORT=''
num_opts=0
while getopts "c:x:f" opt
do
    case $opt in
        f)
            export FORCED=true
            num_opts=`expr $num_opts + 1`
            ;;
        c)
            export CONFIG_FILE="$OPTARG"
            num_opts=`expr $num_opts + 2`
            ;;
        x)
            export XML_REPORT="$OPTARG"
            num_opts=`expr $num_opts + 2`
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done
shift $num_opts;

if [ $# -lt 1 ];
    then
        echo "Please specify which tests you want to run."
        exit 1
    else
        export TESTS="$@"
fi

echo "----------------------------------------------------------------------"
echo "Checking cluster configuration with config file: $CONFIG_FILE"
echo "----------------------------------------------------------------------"

for TEST in $TESTS; do
    if [ -d $TEST ]; then
        if [ -e "$TEST/test_cluster_setup.py" ]; then
            nosetests --verbosity=2 "$TEST/test_cluster_setup.py" --tc-format=json --tc-file="$CONFIG_FILE"

            # If the cluster isn't set up properly, just exit and don't execute the tests.
            cluster_setup_status=${PIPESTATUS[0]}
            if [ "$cluster_setup_status" -ne "0" ]; then
                echo "Cluster config check failed. Exiting with status $cluster_setup_status"
                exit $cluster_setup_status
            fi
        else
            echo "No test_cluster_setup.* found in $TEST, continuing..."
        fi
    fi
done

if ! $FORCED
    then
        echo "----------------------------------------------------------------------"
        echo "Checking that cluster is not already configured..."
        echo "----------------------------------------------------------------------"
        nosetests tests/integration/utils/verify_cluster_not_configured.py --tc-format=json --tc-file="$CONFIG_FILE" #2> /dev/null
        if [ ${PIPESTATUS[0]} -ne 0 ]
        then
            echo ""
            read -p "*****YOUR CLUSTER IS NOT EMPTY! Running integration tests may wipe all hosts and/or targets for the chroma-manager specified in your config file for this cluster. Press [Enter] to continue on with the tests..."
        fi
fi

echo "----------------------------------------------------------------------"
echo "Running tests in $(echo $TESTS | sed -e 's/ /, /g' -e 's/\(.*,\)/\1 and/')"
echo "----------------------------------------------------------------------"

if [ -n "$XML_REPORT" ]; then
    XUNIT_ARGS="--with-xunit --xunit-file=$XML_REPORT"
else
    XUNIT_ARGS=""
fi
nosetests --verbosity=2 --exclude=".*test_cluster_setup.*" --tc-format=json --tc-file="$CONFIG_FILE" $XUNIT_ARGS $NOSE_ARGS $TESTS
