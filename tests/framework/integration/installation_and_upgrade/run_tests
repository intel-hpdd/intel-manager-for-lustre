#!/bin/bash -ex

spacelist_to_commalist() {
    echo $@ | tr ' ' ','
}

. "$CHROMA_DIR"/tests/framework/integration/utils/node_lib.sh

[ -r localenv ] && . localenv

# Remove test results and coverage reports from previous run
rm -rfv $PWD/test_reports/*
rm -rfv $PWD/coverage_reports/.coverage*
mkdir -p $PWD/test_reports
mkdir -p $PWD/coverage_reports

ARCHIVE_NAME=$SHORT_ARCHIVE_NAME-$IEEL_VERSION-current.tar.gz
CLUSTER_CONFIG=${CLUSTER_CONFIG:-"$(ls $PWD/shared_storage_configuration_cluster_cfg.json)"}
CHROMA_DIR=${CHROMA_DIR:-"$PWD/integrated-manager-for-lustre/"}
USE_FENCE_XVM=false

PREVIOUS_INSTALL_DIR=previous_install
UPGRADE_INSTALL_DIR=upgrade_install

eval $(python $CHROMA_DIR/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")

TESTS_DIR="tests/integration/installation_and_upgrade/"

trap "set +e; echo 'Collecting reports...'; scp root@$TEST_RUNNER:~/test_report*.xml \"$PWD/test_reports/\"" EXIT

# Install and setup chroma software storage appliances
pdsh -l root -R ssh -S -w $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]}) "exec 2>&1; set -xe
# Ensure that coverage is disabled
# https://github.com/pypa/virtualenv/issues/355
python_version=\$(python -c 'import platform; print \".\".join(platform.python_version_tuple()[0:2])')
rm -f /usr/lib/python\$python_version/site-packages/sitecustomize.py*

if $USE_FENCE_XVM; then
    # fence_xvm support
    mkdir -p /etc/cluster
    echo \"not secure\" > /etc/cluster/fence_xvm.key
fi" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi


# first fetch and install IML 4.0.x
IML_PREVIOUS_VERSION="4.0.10.0"
IML_PREVIOUS_URL="https://github.com/whamcloud/integrated-manager-for-lustre/releases/download/v${IML_PREVIOUS_VERSION}/iml-${IML_PREVIOUS_VERSION}.tar.gz"
IML_TARBALL="iml-${IML_PREVIOUS_VERSION}.tar.gz"
EXPECT_SCRIPT=install-4.x.exp

curl -k -L "${IML_PREVIOUS_URL}" --output "${IML_TARBALL}"

# Install and setup old manager
scp $IML_TARBALL $CHROMA_DIR/tests/utils/"$EXPECT_SCRIPT" root@$CHROMA_MANAGER:/tmp
ssh root@$CHROMA_MANAGER "#don't do this, it hangs the ssh up, when used with expect, for some reason: exec 2>&1
set -ex
yum -y install expect

# Unpack the previous install into /tmp/$PREVIOUS_INSTALL_DIR
cd /tmp
mkdir $PREVIOUS_INSTALL_DIR
mv $IML_TARBALL $PREVIOUS_INSTALL_DIR/$IML_TARBALL
mv $EXPECT_SCRIPT $PREVIOUS_INSTALL_DIR/

cd $PREVIOUS_INSTALL_DIR
tar xzvf $IML_TARBALL

# Install from the installation package
cd ${IML_TARBALL%%.tar.gz}
if ! expect ../$EXPECT_SCRIPT $CHROMA_USER $CHROMA_EMAIL $CHROMA_PASS ${CHROMA_NTP_SERVER:-localhost}; then
    rc=\${PIPESTATUS[0]}
    echo \"Install log:\"
    cat /var/log/chroma/install.log
    exit \$rc
fi
# make some compatibilty links for older versions of RHEL
# this is most likely a product gap
ln -s 7 /var/lib/chroma/repo/iml-agent/7.5
ln -s 7 /var/lib/chroma/repo/iml-agent/7.4
ln -s 7 /var/lib/chroma/repo/iml-agent/7.3
rpm -qa | sort > /tmp/rpms_before_upgrade"
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# Replace extras repo with it's vault equivalent. see: https://github.com/whamcloud/integrated-manager-for-lustre/issues/827
pdsh -l root -R ssh -S -w $(spacelist_to_commalist $CHROMA_MANAGER ${STORAGE_APPLIANCES[@]} ${WORKERS[@]}) "exec 2>&1; set -xe
yum-config-manager --add-repo=http://vault.centos.org/centos/7.5.1804/extras/x86_64/
yum-config-manager --disable extras" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# Install and setup IML storage servers
pdsh -l root -R ssh -S -w $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]}) "exec 2>&1; set -xe
# let's see what's in yum.conf at this point
cat /etc/yum.conf
if grep  ^distroverpkg= /etc/yum.conf; then
    # and fix it if necessary
    RH_RELEASE=\$(rpm -q --whatprovides redhat-release)
    ed <<EOF /etc/yum.conf
/distroverpkg=/c
distroverpkg=\${RH_RELEASE%-*-*}
.
wq
EOF
fi" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# Install a client
source $CHROMA_DIR/tests/framework/integration/utils/install_client.sh
wait_for_nodes "$CLIENT_1" "rpm -q kmod-lustre-client || exit 0
[ \$(uname -r) = \$(grubby --default-kernel | sed -e 's/.*z-//') ]"

echo "Create and exercise a filesystem..."

TESTS="$TESTS_DIR/../shared_storage_configuration/test_cluster_setup.py \
       $TESTS_DIR/test_create_filesystem.py:TestCreateFilesystem.test_create"

# shellcheck disable=SC2086
ssh root@$TEST_RUNNER "exec 2>&1; set -xe
cd /usr/share/chroma-manager/
export IML_4_INSTALLED=yup
./tests/integration/run_tests -f -c /root/cluster_cfg.json -x ~/test_report_pre_upgrade.xml $TESTS"

echo "Now upgrade the OS and IML..."

# first have to shut down the filesystem so that we don't have incompatible OS/IML issues
ssh root@$TEST_RUNNER "exec 2>&1; set -xe
cd /usr/share/chroma-manager/
./tests/integration/run_tests -f -c /root/cluster_cfg.json -x ~/test_report_post_filesystem_stop.xml $TESTS_DIR/test_update_with_yum.py:TestYumUpdate.test_stop_before_update"

# re-enable needed repos needed for the upgraded version
pdsh -l root -R ssh -S -w $(spacelist_to_commalist $CHROMA_MANAGER ${STORAGE_APPLIANCES[@]} ${WORKERS[@]}) "exec 2>&1; set -xe
rm -rf /etc/yum.repos.d/vault.centos.org_centos_7.5.1804_extras_x86_64_.repo
yum-config-manager --enable extras" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

. $CHROMA_DIR/tests/framework/integration/utils/upgrade_os.sh
if ! upgrade_os $TEST_DISTRO_NAME $UPGRADE_DISTRO_VERSION $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]} ${WORKERS[@]}); then
    echo "Upgrade failed"
    exit 1
fi

# re-enable needed repos needed for the upgraded version
pdsh -l root -R ssh -S -w $(spacelist_to_commalist $CHROMA_MANAGER ${STORAGE_APPLIANCES[@]} ${WORKERS[@]}) "exec 2>&1; set -xe
yum-config-manager --enable $COPR_OWNER-$COPR_PROJECT"
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# Install and setup new manager
scp "$CHROMA_DIR"/chroma_support.repo "$CHROMA_DIR"/_topdir/RPMS/noarch/python2-iml-manager{,-cli,-libs}-5* "$CHROMA_DIR"/tests/utils/upgrade.exp root@"$CHROMA_MANAGER":/tmp

ssh root@"$CHROMA_MANAGER" "#don't do this, it hangs the ssh up, when used with expect, for some reason: exec 2>&1
set -ex
existing_IML_version=\$(rpm -q --qf \"%{VERSION}-%{RELEASE}\n\" chroma-manager)

cd /tmp

# Wipe out the old support repo with our new one.
mv -f chroma_support.repo /etc/yum.repos.d/

# Unpack the current install into /tmp/$UPGRADE_INSTALL_DIR
mkdir $UPGRADE_INSTALL_DIR
mv python2-iml-manager-* $UPGRADE_INSTALL_DIR/
mv upgrade.exp $UPGRADE_INSTALL_DIR/upgrade.exp

cd $UPGRADE_INSTALL_DIR

yum install -y ./python2-iml-manager-*

if ! expect upgrade.exp; then
    rc=\${PIPESTATUS[0]}
    echo \"Install log:\"
    cat /var/log/chroma/install.log
    exit \$rc
fi

# make sure it really did do an upgrade
upgraded_IML_version=\$(rpm -q --qf \"%{VERSION}-%{RELEASE}\n\" python2-iml-manager)
if [ \$existing_IML_version = \$upgraded_IML_version ]; then
    echo \"Upgrade didn't actually upgrade the chroma-manager package\"
    echo \"Install log:\"
    cat /var/log/chroma/install.log
    exit 1
fi

cat <<\"EOF1\" > /usr/share/chroma-manager/local_settings.py
import logging
LOG_LEVEL = logging.DEBUG
$LOCAL_SETTINGS
EOF1

# override /usr/share/chroma-manager/base.repo
if [ -f /tmp/base.repo.in ]; then
    # make sure we use the correct lustre though!
    sed -e \"s/@LUSTRE_SERVER_URL@/${LUSTRE_SERVER_URL//\//\\\\/}/\" \
        -e \"s/@LUSTRE_CLIENT_URL@/${LUSTRE_CLIENT_URL//\//\\\\/}/\" \
        < /tmp/base.repo.in > /usr/share/chroma-manager/base.repo
fi
# add any repos needed by the test
if [ -n \"$STORAGE_SERVER_REPOS\" ]; then
    for repo in $STORAGE_SERVER_REPOS; do
        {
            echo
            curl \"\$repo\"
        } >> /usr/share/chroma-manager/base.repo
    done
fi

# Ensure that coverage is disabled
# https://github.com/pypa/virtualenv/issues/355
python_version=\$(python -c 'import platform; print \".\".join(platform.python_version_tuple()[0:2])')
rm -f /usr/lib/python\$python_version/site-packages/sitecustomize.py*"

echo "End upgrade and setup."


. $CHROMA_DIR/tests/framework/integration/utils/upgrade_os.sh
if ! upgrade_os $TEST_DISTRO_NAME $UPGRADE_DISTRO_VERSION $(spacelist_to_commalist $CHROMA_MANAGER); then
    echo "Upgrade failed"
    exit 1
fi

# Restart the manager after upgrade
ssh root@$CHROMA_MANAGER "exec 2>&1; set -xe
systemctl restart iml-manager.target"

echo "Test existing filesystem is still there"

TESTS="$TESTS_DIR/test_data_consistancy.py \
       $TESTS_DIR/test_update_with_yum.py:TestYumUpdate.test_obsolete_chroma_diagnostics \
       $TESTS_DIR/test_update_with_yum.py:TestYumUpdate.test_yum_update \
       $TESTS_DIR/test_create_filesystem.py:TestExistsFilesystem.test_exists"

ssh root@$TEST_RUNNER "exec 2>&1; set -xe
cd /usr/share/chroma-manager/
export UPGRADE_FROM_VER="4.0"
./tests/integration/run_tests -f -c /root/cluster_cfg.json -x ~/test_report_post_upgrade.xml $TESTS"

# now provide an information inventory of the difference in the RPM
# catalog after the upgrade

pdsh -l root -R ssh -S -w "$(spacelist_to_commalist "$ALL_NODES")" "exec 2>&1; set -xe
if [ -f /tmp/rpms_before_upgrade ]; then
    if ! diff -W 120 -y /tmp/rpms_before_upgrade <(rpm -qa | sort); then
        diff_rc=${PIPESTATUS[0]}
        # diff exits with 1 if differences are found
        if [ \"\$diff_rc\" -ne 1 ]; then
            exit \"\$diff_rc\"
        fi
    fi
    rm /tmp/rpms_before_upgrade
fi" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# test that removing the chroma-manager RPM removes /var/lib/chroma
ssh root@$CHROMA_MANAGER "set -xe
exec 2>&1
ls -l /var/lib/chroma
rpm -e python2-iml-manager-cli python2-iml-manager python2-iml-manager-libs
if [ -d /var/lib/chroma ]; then
    echo \"Removing RPMs failed to clean up /var/lib/chroma\"
    ls -l /var/lib/chroma
    exit 1
fi"

exit 0
