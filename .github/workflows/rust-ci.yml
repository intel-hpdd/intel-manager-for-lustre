name: emf-rust
on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: "00 01 * * *"

env:
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --locked -- -W warnings

  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  timings:
    name: Timings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - run: cargo +nightly build -Ztimings=html,info

      - name: Archive report
        uses: actions/upload-artifact@v2
        with:
          name: timing_report
          path: cargo-timing*.html
          retention-days: 1

  sqlx_schema_check:
    name: Sqlx Schema Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: emf
          POSTGRES_PASSWORD: emf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - run: sudo PGPASSWORD=emf psql -h localhost -p 5432 -c 'CREATE EXTENSION IF NOT EXISTS btree_gist;' -d emf -U emf
        env:
          DB_PASSWORD: emf
          DB_HOST: localhost
          DB_PORT: 5432

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - run: cargo install sqlx-cli --no-default-features --features postgres --git https://github.com/launchbadge/sqlx --tag v0.4.2
      - uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://emf:emf@localhost:5432/emf
        with:
          command: sqlx
          args: migrate run

      - uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://emf:emf@localhost:5432/emf
        with:
          command: sqlx
          args: prepare --merged --check -- --tests
  emf-exa-parser_test:
    name: EXAScaler parser test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Run ignored test
        uses: ./.github/actions/es-api
        env:
          TASK: emf-exa-parser
          WORKSPACE: ${{ github.workspace }}
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: emf
          POSTGRES_PASSWORD: emf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install PostgreSQL client
        run: sudo apt-get -yqq install libpq-dev

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions-rs/cargo@v1
      - run: cargo install sqlx-cli --no-default-features --features postgres --git https://github.com/launchbadge/sqlx --tag v0.4.2

      - uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://emf:emf@localhost:5432/emf
        with:
          command: sqlx
          args: migrate run

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked

      - name: Run db tests
        uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://emf:emf@localhost:5432/emf
          PG_USER: emf
          PG_HOST: localhost
          PG_NAME: emf
          PG_PASSWORD: emf
        with:
          command: test
          args: --test integration_tests --locked -- --ignored
