name: iml-rust
on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: "00 01 * * *"

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --locked -- -W warnings

  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  sqlx_schema_check:
    name: Sqlx Schema Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:9.6.17
        env:
          POSTGRES_USER: chroma
          POSTGRES_PASSWORD: chroma
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/setup-python@v1
      - uses: dschep/install-pipenv-action@v1
      - run: sudo PGPASSWORD=chroma psql -h localhost -p 5432 -c 'CREATE EXTENSION IF NOT EXISTS btree_gist;' -d chroma -U chroma
      - run: pipenv install
      - run: pipenv run ./manage.py migrate
        env:
          DB_PASSWORD: chroma
          DB_HOST: localhost
          DB_PORT: 5432

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - run: cargo install sqlx-cli --no-default-features --features postgres --git https://github.com/jgrund/sqlx --branch workspace-support
      - uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://chroma:chroma@localhost:5432/chroma
        with:
          command: sqlx
          args: migrate run

      - uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://chroma:chroma@localhost:5432/chroma
        with:
          command: sqlx
          args: prepare --merged --check -- --tests

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    services:
      rabbitmq:
        image: rabbitmq:3.6
        ports:
          - 5672:5672
      postgres:
        image: postgres:9.6.17
        env:
          POSTGRES_USER: chroma
          POSTGRES_PASSWORD: chroma
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install PostgreSQL client
        run: sudo apt-get -yqq install libpq-dev

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions/setup-python@v1
      - uses: dschep/install-pipenv-action@v1
      - run: sudo PGPASSWORD=chroma psql -h localhost -p 5432 -c 'CREATE EXTENSION IF NOT EXISTS btree_gist;' -d chroma -U chroma
      - run: pipenv install
      - run: pipenv run ./manage.py migrate
        env:
          DB_PASSWORD: chroma
          DB_HOST: localhost
          DB_PORT: 5432
      - run: cargo install sqlx-cli --no-default-features --features postgres --git https://github.com/jgrund/sqlx --branch workspace-support
      - uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://chroma:chroma@localhost:5432/chroma
        with:
          command: sqlx
          args: migrate run
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked

      - name: Run db tests
        uses: actions-rs/cargo@v1
        env:
          DATABASE_URL: postgres://chroma:chroma@localhost:5432/chroma
          DB_USER: chroma
          DB_HOST: localhost
          DB_NAME: chroma
          DB_PASSWORD: chroma
        with:
          command: test
          args: --test integration_tests --locked -- --ignored

  check_rpm_build:
    name: Check RPM build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Build rpm
        uses: ./.github/actions/copr-rust
        env:
          SPEC: rust-iml.spec
          LOCAL_ONLY: true
          WORKSPACE: ${{ github.workspace }}
          RUSTUP_TOOLCHAIN: stable-x86_64-unknown-linux-gnu
      - name: Archive rpm
        uses: actions/upload-artifact@v1
        with:
          name: rpm
          path: _topdir/RPMS/x86_64
